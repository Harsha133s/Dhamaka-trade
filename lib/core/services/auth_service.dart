/// Auto-generated by TradeVerseAI Agent
/// Purpose: Authentication service with Google OAuth, email/password auth, and session management
/// Dependencies: supabase_flutter, riverpod

import 'package:flutter/foundation.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

/// Authentication service provider
final authServiceProvider = Provider<AuthService>((ref) {
  return AuthService(Supabase.instance.client);
});

/// Current user provider
final currentUserProvider = StreamProvider<User?>((ref) {
  final authService = ref.watch(authServiceProvider);
  return authService.authStateChanges;
});

/// Authentication service handling all auth operations
class AuthService {
  final SupabaseClient _supabase;

  AuthService(this._supabase);

  /// Stream of authentication state changes
  Stream<User?> get authStateChanges => 
      _supabase.auth.onAuthStateChange.map((data) => data.session?.user);

  /// Get current user
  User? get currentUser => _supabase.auth.currentUser;

  /// Get current session
  Session? get currentSession => _supabase.auth.currentSession;

  /// Check if user is authenticated
  bool get isAuthenticated => currentUser != null;

  /// Sign in with Google OAuth
  /// 
  /// Uses Supabase OAuth flow which works across all platforms
  Future<AuthResponse> signInWithGoogle() async {
    try {
      debugPrint('Starting Google OAuth sign-in...');
      
      // Use Supabase's OAuth flow which handles the complexity
      await _supabase.auth.signInWithOAuth(
        OAuthProvider.google,
        redirectTo: kIsWeb ? null : 'io.supabase.tradeverse://login-callback/',
        authScreenLaunchMode: LaunchMode.externalApplication,
      );
      
      // Wait a moment for the auth state to update
      await Future.delayed(const Duration(seconds: 1));
      
      // Check if we're now authenticated
      final user = _supabase.auth.currentUser;
      final session = _supabase.auth.currentSession;
      
      if (user != null && session != null) {
        // Create user profile if it's a new user
        await _createUserProfile(
          userId: user.id,
          email: user.email ?? '',
          fullName: user.userMetadata?['full_name'] as String?,
          username: user.userMetadata?['user_name'] as String?,
        );
        
        debugPrint('Google sign-in successful: ${user.email}');
        return AuthResponse(
          session: session,
          user: user,
        );
      } else {
        throw Exception('Authentication completed but no session found');
      }
    } catch (e) {
      debugPrint('Error signing in with Google: $e');
      rethrow;
    }
  }

  /// Sign in with email and password
  Future<AuthResponse> signInWithEmail({
    required String email,
    required String password,
  }) async {
    try {
      return await _supabase.auth.signInWithPassword(
        email: email,
        password: password,
      );
    } catch (e) {
      debugPrint('Error signing in with email: $e');
      rethrow;
    }
  }

  /// Sign up with email and password
  Future<AuthResponse> signUpWithEmail({
    required String email,
    required String password,
    String? fullName,
    String? username,
  }) async {
    try {
      final response = await _supabase.auth.signUp(
        email: email,
        password: password,
        data: {
          if (fullName != null) 'full_name': fullName,
          if (username != null) 'username': username,
        },
      );

      // Create user profile in public.users table
      if (response.user != null) {
        await _createUserProfile(
          userId: response.user!.id,
          email: email,
          fullName: fullName,
          username: username,
        );
      }

      return response;
    } catch (e) {
      debugPrint('Error signing up with email: $e');
      rethrow;
    }
  }

  /// Create user profile in public.users table
  Future<void> _createUserProfile({
    required String userId,
    required String email,
    String? fullName,
    String? username,
  }) async {
    try {
      await _supabase.from('users').insert({
        'id': userId,
        'email': email,
        'full_name': fullName,
        'username': username ?? email.split('@')[0],
        'level': 1,
        'xp': 0,
        'total_trades': 0,
        'win_rate': 0.0,
        'total_pnl': 0.0,
        'followers_count': 0,
        'following_count': 0,
      });
    } catch (e) {
      debugPrint('Error creating user profile: $e');
      // Don't rethrow - user is already created in auth.users
    }
  }

  /// Sign out
  Future<void> signOut() async {
    try {
      await _supabase.auth.signOut();
    } catch (e) {
      debugPrint('Error signing out: $e');
      rethrow;
    }
  }

  /// Send password reset email
  Future<void> resetPassword(String email) async {
    try {
      await _supabase.auth.resetPasswordForEmail(email);
    } catch (e) {
      debugPrint('Error sending password reset email: $e');
      rethrow;
    }
  }

  /// Update user password
  Future<UserResponse> updatePassword(String newPassword) async {
    try {
      return await _supabase.auth.updateUser(
        UserAttributes(password: newPassword),
      );
    } catch (e) {
      debugPrint('Error updating password: $e');
      rethrow;
    }
  }

  /// Get user profile from public.users table
  Future<Map<String, dynamic>?> getUserProfile(String userId) async {
    try {
      final response = await _supabase
          .from('users')
          .select()
          .eq('id', userId)
          .maybeSingle();
      
      return response;
    } catch (e) {
      debugPrint('Error fetching user profile: $e');
      return null;
    }
  }

  /// Update user profile in public.users table
  Future<void> updateUserProfile({
    required String userId,
    String? fullName,
    String? username,
    String? bio,
    String? avatarUrl,
  }) async {
    try {
      final updates = <String, dynamic>{
        'updated_at': DateTime.now().toIso8601String(),
      };

      if (fullName != null) updates['full_name'] = fullName;
      if (username != null) updates['username'] = username;
      if (bio != null) updates['bio'] = bio;
      if (avatarUrl != null) updates['avatar_url'] = avatarUrl;

      await _supabase.from('users').update(updates).eq('id', userId);
    } catch (e) {
      debugPrint('Error updating user profile: $e');
      rethrow;
    }
  }
}
