// Auto-generated by TradeVerseAI Agent
// Purpose: Modern glassmorphic layout with responsive design
// Enhanced with glass effects, gradient backgrounds, and smooth animations

import 'dart:io';
import 'package:flutter/foundation.dart' show kIsWeb;
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:go_router/go_router.dart';
import 'package:flutter_animate/flutter_animate.dart';
import '../core/widgets/app_header.dart';
import '../core/widgets/app_nav_rail.dart';
import '../core/widgets/glassmorphic_components.dart';
import '../core/theme/app_tokens.dart';

class AppScaffold extends StatefulWidget {
  final Widget child;

  const AppScaffold({super.key, required this.child});

  @override
  State<AppScaffold> createState() => _AppScaffoldState();
}

class _AppScaffoldState extends State<AppScaffold>
    with TickerProviderStateMixin {
  int _selectedIndex = 0;
  late AnimationController _fabAnimationController;
  
  // Side panel toggle state (Windows/Web only)
  bool _isSidePanelExpanded = true;
  late AnimationController _sidePanelAnimationController;
  late Animation<double> _sidePanelAnimation;
  
  // Check if platform supports side panel toggle
  bool get _supportsSidePanelToggle => kIsWeb || Platform.isWindows || Platform.isMacOS || Platform.isLinux;

  // Navigation routes mapping to indices
  final Map<String, int> _routeToIndex = {
    '/': 0, // Today is now the main page
    '/dashboard': 1,
    '/journal': 2,
    '/analytics': 3,
    '/community': 4,
    '/discover': 5,
    '/challenges': 6,
    '/inbox': 7,
    '/calendar': 8,
    '/settings': 9,
  };

  final List<String> _indexToRoute = [
    '/', // Today screen
    '/dashboard',
    '/journal',
    '/analytics',
    '/community',
    '/discover',
    '/challenges',
    '/inbox',
    '/calendar',
    '/settings',
  ];

  @override
  void initState() {
    super.initState();
    
    // Initialize FAB animation
    _fabAnimationController = AnimationController(
      duration: const Duration(milliseconds: 200),
      vsync: this,
    );
    
    // Initialize side panel animation
    _sidePanelAnimationController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
    
    _sidePanelAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _sidePanelAnimationController,
      curve: Curves.easeInOutCubic,
    ));

    // Start animations
    _fabAnimationController.forward();
    _sidePanelAnimationController.forward();

    // Set initial selected index based on current route
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _updateSelectedIndex();
    });
  }

  @override
  void dispose() {
    _fabAnimationController.dispose();
    _sidePanelAnimationController.dispose();
    super.dispose();
  }

  void _updateSelectedIndex() {
    final currentRoute = GoRouterState.of(context).uri.toString();
    final index = _routeToIndex[currentRoute] ?? 0;
    if (index != _selectedIndex) {
      setState(() {
        _selectedIndex = index;
      });
    }
  }
  
  /// Toggles side panel visibility (Windows/Web only)
  void _toggleSidePanel() {
    if (!_supportsSidePanelToggle) return;
    
    setState(() {
      _isSidePanelExpanded = !_isSidePanelExpanded;
    });
    
    if (_isSidePanelExpanded) {
      _sidePanelAnimationController.forward();
    } else {
      _sidePanelAnimationController.reverse();
    }
    
    // Haptic feedback
    HapticFeedback.lightImpact();
  }

  @override
  Widget build(BuildContext context) {
    return LayoutBuilder(
      builder: (context, constraints) {
        // Responsive breakpoints
        final isLargeScreen = constraints.maxWidth > 1200;
        final isMediumScreen = constraints.maxWidth > 600;
        final isSmallScreen = constraints.maxWidth <= 600;

        return Container(
          decoration: const BoxDecoration(
            gradient: AppColors.backgroundGradient,
          ),
          child: Scaffold(
            backgroundColor: Colors.transparent,
            extendBody: true,
            extendBodyBehindAppBar: true,
            
            // Glassmorphic App Header with toggle button (only hidden for small screens)
            appBar: isSmallScreen ? null : AppHeader(
              onToggleSidePanel: isLargeScreen && _supportsSidePanelToggle ? _toggleSidePanel : null,
              showToggleButton: isLargeScreen && _supportsSidePanelToggle,
              isSidePanelExpanded: _isSidePanelExpanded,
            ),
            
            // Desktop/Tablet: Use drawer for navigation rail
            drawer: isMediumScreen && !isLargeScreen
                ? _buildModernNavigationDrawer()
                : null,
            
            // Main body with responsive layout
            body: _buildResponsiveBody(isLargeScreen, isMediumScreen),
            
            // Modern glassmorphic bottom navigation
            bottomNavigationBar: isSmallScreen && _shouldShowBottomNav()
                ? _buildGlassmorphicBottomNavigation()
                : null,
            
          ),
        );
      },
    );
  }

  /// Builds responsive body layout
  Widget _buildResponsiveBody(bool isLargeScreen, bool isMediumScreen) {
    if (isLargeScreen) {
      // Large screen: Side navigation rail + content with toggle
      return Row(
        children: [
          // Animated side panel with navigation rail
          _buildAnimatedSidePanel(),
          
          // Vertical divider (only when panel is expanded)
          AnimatedBuilder(
            animation: _sidePanelAnimation,
            builder: (context, child) {
              return AnimatedContainer(
                duration: const Duration(milliseconds: 300),
                width: _isSidePanelExpanded ? 1 : 0,
                child: _isSidePanelExpanded ? const VerticalDivider(width: 1) : null,
              );
            },
          ),
          
          // Main content area
          Expanded(
            child: AnimatedSwitcher(
              duration: const Duration(milliseconds: 300),
              transitionBuilder: (child, animation) {
                return FadeTransition(
                  opacity: animation,
                  child: SlideTransition(
                    position: animation.drive(
                      Tween(begin: const Offset(0.1, 0), end: Offset.zero),
                    ),
                    child: child,
                  ),
                );
              },
              child: widget.child,
            ),
          ),
        ],
      );
    } else {
      // Medium/Small screen: Full-width content
      return AnimatedSwitcher(
        duration: const Duration(milliseconds: 200),
        transitionBuilder: (child, animation) {
          return FadeTransition(
            opacity: animation,
            child: child,
          );
        },
        child: widget.child,
      );
    }
  }
  
  /// Builds animated side panel for large screens
  Widget _buildAnimatedSidePanel() {
    return AnimatedBuilder(
      animation: _sidePanelAnimation,
      builder: (context, child) {
        return AnimatedContainer(
          duration: const Duration(milliseconds: 300),
          width: _isSidePanelExpanded ? 280 : 80,
          curve: Curves.easeInOutCubic,
          child: AppNavRail(
            selectedIndex: _selectedIndex,
            onDestinationSelected: _handleNavigation,
            extended: _isSidePanelExpanded,
          ),
        );
      },
    );
  }
  

  /// Builds modern glassmorphic navigation drawer
  Widget _buildModernNavigationDrawer() {
    return Container(
      decoration: const BoxDecoration(
        gradient: AppColors.backgroundGradient,
      ),
      child: Drawer(
        backgroundColor: Colors.transparent,
        child: Column(
          children: [
            // Modern glassmorphic header
            Container(
              height: 200,
              margin: const EdgeInsets.all(16),
              child: GlassContainer(
                padding: const EdgeInsets.all(20),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Container(
                      padding: const EdgeInsets.all(16),
                      decoration: BoxDecoration(
                        gradient: AppColors.primaryButtonGradient,
                        borderRadius: BorderRadius.circular(20),
                      ),
                      child: const Icon(
                        Icons.auto_graph,
                        color: Colors.white,
                        size: 32,
                      ),
                    ),
                    const SizedBox(height: 16),
                    const Text(
                      'TradeVerse AI',
                      style: TextStyle(
                        color: AppColors.textPrimary,
                        fontSize: 20,
                        fontWeight: FontWeight.w800,
                      ),
                    ),
                    const Text(
                      'Smart Trading Journal',
                      style: TextStyle(
                        color: AppColors.textSecondary,
                        fontSize: 13,
                      ),
                    ),
                  ],
                ),
              ).animate().fadeIn(duration: 600.ms),
            ),
            
            // Navigation items in glass container
            Expanded(
              child: Container(
                margin: const EdgeInsets.symmetric(horizontal: 16),
                child: GlassContainer(
                  padding: const EdgeInsets.symmetric(vertical: 20),
                  child: AppNavRail(
                    selectedIndex: _selectedIndex,
                    onDestinationSelected: (index) {
                      _handleNavigation(index);
                      Navigator.of(context).pop(); // Close drawer
                    },
                    extended: false,
                  ),
                ),
              ),
            ),
            const SizedBox(height: 16),
          ],
        ),
      ),
    );
  }

  /// Check if bottom navigation should be shown (Android/iOS only)
  bool _shouldShowBottomNav() {
    // Don't show on web
    if (kIsWeb) return false;
    
    // Only show on Android and iOS
    return Platform.isAndroid || Platform.isIOS;
  }

  /// Builds glassmorphic bottom navigation for mobile
  Widget _buildGlassmorphicBottomNavigation() {
    return GlassBottomNavBar(
      currentIndex: _selectedIndex,
      onTap: _handleNavigation,
      items: const [
        BottomNavigationBarItem(
          icon: Icon(Icons.today_outlined),
          activeIcon: Icon(Icons.today),
          label: 'Today',
        ),
        BottomNavigationBarItem(
          icon: Icon(Icons.dashboard_outlined),
          activeIcon: Icon(Icons.dashboard),
          label: 'Dashboard',
        ),
        BottomNavigationBarItem(
          icon: Icon(Icons.book_outlined),
          activeIcon: Icon(Icons.book),
          label: 'Journal',
        ),
        BottomNavigationBarItem(
          icon: Icon(Icons.analytics_outlined),
          activeIcon: Icon(Icons.analytics),
          label: 'Analytics',
        ),
        BottomNavigationBarItem(
          icon: Icon(Icons.people_outlined),
          activeIcon: Icon(Icons.people),
          label: 'Community',
        ),
      ],
    );
  }


  /// Handles navigation between pages
  void _handleNavigation(int index) {
    if (index != _selectedIndex && index < _indexToRoute.length) {
      setState(() {
        _selectedIndex = index;
      });
      
      // Navigate with smooth transition
      context.go(_indexToRoute[index]);
      
      // Animate FAB
      _fabAnimationController
        ..reset()
        ..forward();
    }
  }

}

/// Custom page transition for smooth navigation
class CustomPageTransition extends PageTransitionsBuilder {
  @override
  Widget buildTransitions<T extends Object?>(
    PageRoute<T> route,
    BuildContext context,
    Animation<double> animation,
    Animation<double> secondaryAnimation,
    Widget child,
  ) {
    return FadeTransition(
      opacity: animation,
      child: SlideTransition(
        position: animation.drive(
          Tween(
            begin: const Offset(0.05, 0),
            end: Offset.zero,
          ).chain(
            CurveTween(curve: Curves.easeInOut),
          ),
        ),
        child: child,
      ),
    );
  }
}