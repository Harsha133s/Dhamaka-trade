/// Auto-generated by TradeVerseAI Agent
/// Purpose: Interactive P&L line chart with hover tooltips showing profit/loss over time

import 'package:flutter/material.dart';
import 'dart:math' as math;

class PnLChart extends StatefulWidget {
  const PnLChart({Key? key}) : super(key: key);

  @override
  State<PnLChart> createState() => _PnLChartState();
}

class _PnLChartState extends State<PnLChart> {
  bool _isLoading = true;
  List<ChartDataPoint> _chartData = [];
  String _selectedPeriod = '30D';
  ChartDataPoint? _hoveredPoint;

  @override
  void initState() {
    super.initState();
    _loadChartData();
  }

  Future<void> _loadChartData() async {
    setState(() => _isLoading = true);
    
    // Simulate chart data loading
    await Future.delayed(const Duration(seconds: 1));
    
    if (mounted) {
      setState(() {
        _chartData = _generateMockData();
        _isLoading = false;
      });
    }
  }

  List<ChartDataPoint> _generateMockData() {
    final random = math.Random();
    final data = <ChartDataPoint>[];
    double cumulativePnL = 0;
    
    final daysToShow = _selectedPeriod == '7D' ? 7 : (_selectedPeriod == '30D' ? 30 : 90);
    
    for (int i = 0; i < daysToShow; i++) {
      final date = DateTime.now().subtract(Duration(days: daysToShow - i));
      final dailyPnL = (random.nextDouble() - 0.4) * 500; // Slightly positive bias
      cumulativePnL += dailyPnL;
      
      data.add(ChartDataPoint(
        date: date,
        value: cumulativePnL,
        dailyPnL: dailyPnL,
      ));
    }
    
    return data;
  }

  @override
  Widget build(BuildContext context) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _buildChartHeader(),
            const SizedBox(height: 20),
            if (_isLoading)
              _buildLoadingChart()
            else
              _buildChart(),
          ],
        ),
      ),
    );
  }

  Widget _buildChartHeader() {
    final currentPnL = _chartData.isNotEmpty ? _chartData.last.value : 0.0;
    final isPositive = currentPnL >= 0;
    
    return Row(
      children: [
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  Icon(
                    Icons.show_chart,
                    color: const Color(0xFF3B82F6),
                    size: 20,
                  ),
                  const SizedBox(width: 8),
                  Text(
                    'Profit & Loss Trend',
                    style: Theme.of(context).textTheme.titleMedium?.copyWith(
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ],
              ),
              if (!_isLoading) ...[
                const SizedBox(height: 8),
                Row(
                  children: [
                    Text(
                      '\$${currentPnL.toStringAsFixed(2)}',
                      style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                        color: isPositive ? const Color(0xFF10B981) : const Color(0xFFEF4444),
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                    const SizedBox(width: 8),
                    Container(
                      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                      decoration: BoxDecoration(
                        color: isPositive 
                            ? const Color(0xFF10B981).withValues(alpha: 0.1)
                            : const Color(0xFFEF4444).withValues(alpha: 0.1),
                        borderRadius: BorderRadius.circular(4),
                        border: Border.all(
                          color: isPositive 
                              ? const Color(0xFF10B981)
                              : const Color(0xFFEF4444),
                        ),
                      ),
                      child: Text(
                        isPositive ? 'Profitable' : 'Loss',
                        style: TextStyle(
                          color: isPositive 
                              ? const Color(0xFF10B981)
                              : const Color(0xFFEF4444),
                          fontSize: 12,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ],
          ),
        ),
        _buildPeriodSelector(),
      ],
    );
  }

  Widget _buildPeriodSelector() {
    return Row(
      children: ['7D', '30D', '90D'].map((period) {
        final isSelected = _selectedPeriod == period;
        return GestureDetector(
          onTap: () {
            setState(() => _selectedPeriod = period);
            _loadChartData();
          },
          child: Container(
            margin: const EdgeInsets.only(left: 8),
            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
            decoration: BoxDecoration(
              color: isSelected 
                  ? const Color(0xFF3B82F6)
                  : Colors.transparent,
              borderRadius: BorderRadius.circular(6),
              border: Border.all(
                color: const Color(0xFF3B82F6).withValues(alpha: 0.3),
              ),
            ),
            child: Text(
              period,
              style: TextStyle(
                color: isSelected 
                    ? Colors.white 
                    : const Color(0xFF3B82F6),
                fontSize: 12,
                fontWeight: FontWeight.w500,
              ),
            ),
          ),
        );
      }).toList(),
    );
  }

  Widget _buildLoadingChart() {
    return SizedBox(
      height: 200,
      child: Container(
        decoration: BoxDecoration(
          color: Colors.white.withValues(alpha: 0.05),
          borderRadius: BorderRadius.circular(12),
          border: Border.all(color: Colors.white.withValues(alpha: 0.1)),
        ),
        child: const Center(
          child: CircularProgressIndicator(
            valueColor: AlwaysStoppedAnimation<Color>(Color(0xFF3B82F6)),
          ),
        ),
      ),
    );
  }

  Widget _buildChart() {
    return SizedBox(
      height: 200,
      child: Stack(
        children: [
          CustomPaint(
            painter: ChartPainter(
              data: _chartData,
              hoveredPoint: _hoveredPoint,
            ),
            child: GestureDetector(
              onPanUpdate: (details) => _handleChartInteraction(details.localPosition),
              onTapDown: (details) => _handleChartInteraction(details.localPosition),
              child: Container(
                width: double.infinity,
                height: double.infinity,
              ),
            ),
          ),
          if (_hoveredPoint != null)
            _buildTooltip(),
        ],
      ),
    );
  }

  void _handleChartInteraction(Offset position) {
    final RenderBox renderBox = context.findRenderObject() as RenderBox;
    final chartWidth = renderBox.size.width - 40; // Account for padding
    final pointIndex = ((position.dx - 20) / chartWidth * _chartData.length).round();
    
    if (pointIndex >= 0 && pointIndex < _chartData.length) {
      setState(() {
        _hoveredPoint = _chartData[pointIndex];
      });
    }
  }

  Widget _buildTooltip() {
    if (_hoveredPoint == null) return const SizedBox.shrink();
    
    return Positioned(
      top: 10,
      left: 20,
      child: Container(
        padding: const EdgeInsets.all(12),
        decoration: BoxDecoration(
          color: Theme.of(context).cardColor,
          borderRadius: BorderRadius.circular(8),
          border: Border.all(color: Colors.white.withValues(alpha: 0.1)),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withValues(alpha: 0.2),
              blurRadius: 8,
              offset: const Offset(0, 2),
            ),
          ],
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              '${_hoveredPoint!.date.day}/${_hoveredPoint!.date.month}/${_hoveredPoint!.date.year}',
              style: Theme.of(context).textTheme.bodySmall,
            ),
            const SizedBox(height: 4),
            Text(
              'Total P&L: \$${_hoveredPoint!.value.toStringAsFixed(2)}',
              style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                fontWeight: FontWeight.w600,
              ),
            ),
            Text(
              'Daily P&L: ${_hoveredPoint!.dailyPnL >= 0 ? '+' : ''}\$${_hoveredPoint!.dailyPnL.toStringAsFixed(2)}',
              style: Theme.of(context).textTheme.bodySmall?.copyWith(
                color: _hoveredPoint!.dailyPnL >= 0 
                    ? const Color(0xFF10B981)
                    : const Color(0xFFEF4444),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class ChartDataPoint {
  final DateTime date;
  final double value;
  final double dailyPnL;

  ChartDataPoint({
    required this.date,
    required this.value,
    required this.dailyPnL,
  });
}

class ChartPainter extends CustomPainter {
  final List<ChartDataPoint> data;
  final ChartDataPoint? hoveredPoint;

  ChartPainter({
    required this.data,
    this.hoveredPoint,
  });

  @override
  void paint(Canvas canvas, Size size) {
    if (data.isEmpty) return;

    final paint = Paint()
      ..color = const Color(0xFF3B82F6)
      ..strokeWidth = 2
      ..style = PaintingStyle.stroke;

    final fillPaint = Paint()
      ..shader = LinearGradient(
        begin: Alignment.topCenter,
        end: Alignment.bottomCenter,
        colors: [
          const Color(0xFF3B82F6).withValues(alpha: 0.3),
          const Color(0xFF3B82F6).withValues(alpha: 0.0),
        ],
      ).createShader(Rect.fromLTWH(0, 0, size.width, size.height));

    final pointPaint = Paint()
      ..color = const Color(0xFF3B82F6)
      ..style = PaintingStyle.fill;

    final hoveredPointPaint = Paint()
      ..color = const Color(0xFFFFFFFF)
      ..style = PaintingStyle.fill;

    final gridPaint = Paint()
      ..color = Colors.white.withValues(alpha: 0.1)
      ..strokeWidth = 1;

    // Draw grid
    for (int i = 0; i <= 4; i++) {
      final y = size.height / 4 * i;
      canvas.drawLine(Offset(0, y), Offset(size.width, y), gridPaint);
    }

    // Calculate min/max values for scaling
    final minValue = data.map((e) => e.value).reduce(math.min);
    final maxValue = data.map((e) => e.value).reduce(math.max);
    final valueRange = maxValue - minValue;
    
    if (valueRange == 0) return;

    // Create path for line and fill
    final path = Path();
    final fillPath = Path();
    final points = <Offset>[];

    for (int i = 0; i < data.length; i++) {
      final x = size.width / (data.length - 1) * i;
      final normalizedValue = (data[i].value - minValue) / valueRange;
      final y = size.height - (normalizedValue * size.height);
      
      final point = Offset(x, y);
      points.add(point);
      
      if (i == 0) {
        path.moveTo(x, y);
        fillPath.moveTo(x, size.height);
        fillPath.lineTo(x, y);
      } else {
        path.lineTo(x, y);
        fillPath.lineTo(x, y);
      }
    }

    // Complete fill path
    if (points.isNotEmpty) {
      fillPath.lineTo(points.last.dx, size.height);
      fillPath.close();
    }

    // Draw fill area
    canvas.drawPath(fillPath, fillPaint);
    
    // Draw line
    canvas.drawPath(path, paint);

    // Draw points
    for (int i = 0; i < points.length; i++) {
      final isHovered = hoveredPoint != null && data.indexOf(hoveredPoint!) == i;
      canvas.drawCircle(
        points[i], 
        isHovered ? 6 : 3, 
        isHovered ? hoveredPointPaint : pointPaint
      );
      
      if (isHovered) {
        canvas.drawCircle(points[i], 6, Paint()
          ..color = const Color(0xFF3B82F6)
          ..style = PaintingStyle.stroke
          ..strokeWidth = 2
        );
      }
    }
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => true;
}