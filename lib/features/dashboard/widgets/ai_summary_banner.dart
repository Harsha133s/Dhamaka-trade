/// Auto-generated by TradeVerseAI Agent
/// Purpose: AI-generated summary banner showing trading patterns and AI insights

import 'package:flutter/material.dart';

class AiSummaryBanner extends StatefulWidget {
  const AiSummaryBanner({Key? key}) : super(key: key);

  @override
  State<AiSummaryBanner> createState() => _AiSummaryBannerState();
}

class _AiSummaryBannerState extends State<AiSummaryBanner> {
  String _aiInsight = 'Loading AI insights...';
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _loadAiInsights();
  }

  Future<void> _loadAiInsights() async {
    // Simulate AI insights loading
    await Future.delayed(const Duration(seconds: 2));
    
    if (mounted) {
      setState(() {
        _aiInsight = 'Your EUR/USD trades show 72% win rate. Strong performance during Asian hours. Consider increasing position size on breakout patterns.';
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: const Color(0xFF3B82F6).withValues(alpha: 0.1),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(
          color: const Color(0xFF3B82F6).withValues(alpha: 0.3),
          width: 1,
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: const Color(0xFF3B82F6).withValues(alpha: 0.2),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: const Icon(
                  Icons.auto_awesome,
                  color: Color(0xFF3B82F6),
                  size: 20,
                ),
              ),
              const SizedBox(width: 12),
              Text(
                'AI Trading Insight',
                style: Theme.of(context).textTheme.titleMedium?.copyWith(
                  fontWeight: FontWeight.w600,
                  color: const Color(0xFF3B82F6),
                ),
              ),
              const Spacer(),
              if (_isLoading)
                const SizedBox(
                  width: 16,
                  height: 16,
                  child: CircularProgressIndicator(
                    strokeWidth: 2,
                    valueColor: AlwaysStoppedAnimation<Color>(Color(0xFF3B82F6)),
                  ),
                ),
            ],
          ),
          const SizedBox(height: 16),
          AnimatedSwitcher(
            duration: const Duration(milliseconds: 300),
            child: _isLoading
                ? Container(
                    key: const ValueKey('loading'),
                    height: 20,
                    width: double.infinity,
                    decoration: BoxDecoration(
                      color: Colors.white.withValues(alpha: 0.1),
                      borderRadius: BorderRadius.circular(4),
                    ),
                  )
                : Text(
                    key: const ValueKey('content'),
                    _aiInsight,
                    style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                      height: 1.5,
                      color: Colors.white.withValues(alpha: 0.9),
                    ),
                  ),
          ),
          if (!_isLoading) ...[
            const SizedBox(height: 16),
            Row(
              children: [
                _ActionChip(
                  label: 'View Details',
                  onTap: () => _showInsightDetails(context),
                ),
                const SizedBox(width: 8),
                _ActionChip(
                  label: 'Refresh',
                  onTap: _refreshInsights,
                ),
              ],
            ),
          ],
        ],
      ),
    );
  }

  void _showInsightDetails(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('AI Trading Insights'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(_aiInsight),
            const SizedBox(height: 16),
            const Text(
              'Recommendations:',
              style: TextStyle(fontWeight: FontWeight.w600),
            ),
            const SizedBox(height: 8),
            const Text('• Focus on EUR/USD during Asian session'),
            const Text('• Consider 1.5% position size increase'),
            const Text('• Set tighter stops on trend reversals'),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Close'),
          ),
        ],
      ),
    );
  }

  Future<void> _refreshInsights() async {
    setState(() {
      _isLoading = true;
    });
    await _loadAiInsights();
  }
}

class _ActionChip extends StatelessWidget {
  final String label;
  final VoidCallback onTap;

  const _ActionChip({
    required this.label,
    required this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
        decoration: BoxDecoration(
          color: const Color(0xFF3B82F6).withValues(alpha: 0.2),
          borderRadius: BorderRadius.circular(20),
          border: Border.all(
            color: const Color(0xFF3B82F6).withValues(alpha: 0.3),
          ),
        ),
        child: Text(
          label,
          style: const TextStyle(
            color: Color(0xFF3B82F6),
            fontSize: 12,
            fontWeight: FontWeight.w500,
          ),
        ),
      ),
    );
  }
}