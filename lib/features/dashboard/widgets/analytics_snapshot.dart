/// Auto-generated by TradeVerseAI Agent
/// Purpose: Analytics snapshot displaying win rate, total trades, avg R:R, and other key metrics

import 'package:flutter/material.dart';

class AnalyticsSnapshot extends StatefulWidget {
  const AnalyticsSnapshot({Key? key}) : super(key: key);

  @override
  State<AnalyticsSnapshot> createState() => _AnalyticsSnapshotState();
}

class _AnalyticsSnapshotState extends State<AnalyticsSnapshot> {
  bool _isLoading = true;
  late Map<String, dynamic> _analytics;

  @override
  void initState() {
    super.initState();
    _loadAnalytics();
  }

  Future<void> _loadAnalytics() async {
    // Simulate analytics loading
    await Future.delayed(const Duration(seconds: 1));
    
    if (mounted) {
      setState(() {
        _analytics = {
          'winRate': {'value': '65%', 'trend': '+5%', 'isPositive': true},
          'totalTrades': {'value': '42', 'trend': '+7', 'isPositive': true},
          'avgRR': {'value': '1.8:1', 'trend': '+0.2', 'isPositive': true},
          'totalPnL': {'value': '\$3,240', 'trend': '+12%', 'isPositive': true},
          'avgWin': {'value': '\$280', 'trend': '+15', 'isPositive': true},
          'avgLoss': {'value': '\$155', 'trend': '-10', 'isPositive': true},
        };
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Icon(
              Icons.trending_up,
              color: const Color(0xFF3B82F6),
              size: 20,
            ),
            const SizedBox(width: 8),
            Text(
              'Performance Overview',
              style: Theme.of(context).textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.w600,
              ),
            ),
          ],
        ),
        const SizedBox(height: 16),
        if (_isLoading)
          _buildLoadingState()
        else
          _buildAnalyticsGrid(),
      ],
    );
  }

  Widget _buildLoadingState() {
    return GridView.count(
      shrinkWrap: true,
      physics: const NeverScrollableScrollPhysics(),
      crossAxisCount: _getCrossAxisCount(),
      crossAxisSpacing: 16,
      mainAxisSpacing: 16,
      childAspectRatio: 1.2,
      children: List.generate(6, (index) => _buildLoadingCard()),
    );
  }

  Widget _buildLoadingCard() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Container(
              width: 24,
              height: 24,
              decoration: BoxDecoration(
                color: Colors.white.withValues(alpha: 0.1),
                borderRadius: BorderRadius.circular(4),
              ),
            ),
            const SizedBox(height: 12),
            Container(
              width: 60,
              height: 12,
              decoration: BoxDecoration(
                color: Colors.white.withValues(alpha: 0.1),
                borderRadius: BorderRadius.circular(4),
              ),
            ),
            const SizedBox(height: 8),
            Container(
              width: 80,
              height: 16,
              decoration: BoxDecoration(
                color: Colors.white.withValues(alpha: 0.1),
                borderRadius: BorderRadius.circular(4),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildAnalyticsGrid() {
    return GridView.count(
      shrinkWrap: true,
      physics: const NeverScrollableScrollPhysics(),
      crossAxisCount: _getCrossAxisCount(),
      crossAxisSpacing: 16,
      mainAxisSpacing: 16,
      childAspectRatio: 1.2,
      children: [
        _buildMetricCard(
          'Win Rate',
          _analytics['winRate'],
          Icons.trending_up,
          const Color(0xFF10B981),
        ),
        _buildMetricCard(
          'Total Trades',
          _analytics['totalTrades'],
          Icons.receipt,
          const Color(0xFF3B82F6),
        ),
        _buildMetricCard(
          'Avg R:R',
          _analytics['avgRR'],
          Icons.track_changes,
          const Color(0xFFF59E0B),
        ),
        _buildMetricCard(
          'Total P&L',
          _analytics['totalPnL'],
          Icons.account_balance_wallet,
          const Color(0xFF8B5CF6),
        ),
        _buildMetricCard(
          'Avg Win',
          _analytics['avgWin'],
          Icons.arrow_upward,
          const Color(0xFF10B981),
        ),
        _buildMetricCard(
          'Avg Loss',
          _analytics['avgLoss'],
          Icons.arrow_downward,
          const Color(0xFFEF4444),
        ),
      ],
    );
  }

  Widget _buildMetricCard(String title, Map<String, dynamic> data, IconData icon, Color color) {
    return Card(
      child: InkWell(
        onTap: () => _showMetricDetails(title, data),
        borderRadius: BorderRadius.circular(8),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  Icon(icon, color: color, size: 20),
                  const Spacer(),
                  if (data['trend'] != null)
                    Container(
                      padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                      decoration: BoxDecoration(
                        color: (data['isPositive'] as bool)
                            ? const Color(0xFF10B981).withValues(alpha: 0.1)
                            : const Color(0xFFEF4444).withValues(alpha: 0.1),
                        borderRadius: BorderRadius.circular(4),
                      ),
                      child: Text(
                        data['trend'],
                        style: TextStyle(
                          fontSize: 10,
                          fontWeight: FontWeight.w500,
                          color: (data['isPositive'] as bool)
                              ? const Color(0xFF10B981)
                              : const Color(0xFFEF4444),
                        ),
                      ),
                    ),
                ],
              ),
              const SizedBox(height: 8),
              Text(
                title,
                style: Theme.of(context).textTheme.bodySmall?.copyWith(
                  color: Colors.white.withValues(alpha: 0.7),
                ),
              ),
              const SizedBox(height: 4),
              Expanded(
                child: Align(
                  alignment: Alignment.bottomLeft,
                  child: Text(
                    data['value'],
                    style: Theme.of(context).textTheme.titleLarge?.copyWith(
                      color: color,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  int _getCrossAxisCount() {
    final width = MediaQuery.of(context).size.width;
    if (width > 1200) return 6;
    if (width > 800) return 3;
    return 2;
  }

  void _showMetricDetails(String title, Map<String, dynamic> data) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(title),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('Current Value: ${data['value']}'),
            if (data['trend'] != null) ...[
              const SizedBox(height: 8),
              Text('Trend: ${data['trend']}'),
              const SizedBox(height: 8),
              Text(
                data['isPositive'] as bool ? 'Positive trend' : 'Negative trend',
                style: TextStyle(
                  color: (data['isPositive'] as bool)
                      ? const Color(0xFF10B981)
                      : const Color(0xFFEF4444),
                ),
              ),
            ],
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Close'),
          ),
        ],
      ),
    );
  }
}