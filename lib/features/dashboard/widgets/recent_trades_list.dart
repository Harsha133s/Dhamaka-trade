/// Auto-generated by TradeVerseAI Agent
/// Purpose: Scrollable list component for displaying recent trades

import 'package:flutter/material.dart';

class RecentTradesList extends StatefulWidget {
  const RecentTradesList({Key? key}) : super(key: key);

  @override
  State<RecentTradesList> createState() => _RecentTradesListState();
}

class _RecentTradesListState extends State<RecentTradesList> {
  bool _isLoading = true;
  List<TradeData> _trades = [];

  @override
  void initState() {
    super.initState();
    _loadRecentTrades();
  }

  Future<void> _loadRecentTrades() async {
    setState(() => _isLoading = true);
    
    // Simulate loading recent trades
    await Future.delayed(const Duration(seconds: 1));
    
    if (mounted) {
      setState(() {
        _trades = _generateMockTrades();
        _isLoading = false;
      });
    }
  }

  List<TradeData> _generateMockTrades() {
    final symbols = ['EUR/USD', 'GBP/USD', 'USD/JPY', 'AUD/USD', 'NZD/USD', 'USD/CAD'];
    final sides = ['Long', 'Short'];
    
    return List.generate(8, (index) {
      final isProfitable = index % 3 != 0; // 2/3 profitable
      final symbol = symbols[index % symbols.length];
      final side = sides[index % sides.length];
      final entryPrice = 1.0800 + (index * 0.001);
      final exitPrice = isProfitable 
          ? entryPrice + 0.005 
          : entryPrice - 0.003;
      final pnl = isProfitable 
          ? (index + 1) * 120.0 
          : -(index + 1) * 85.0;
      
      return TradeData(
        id: 'trade_${index + 1}',
        symbol: symbol,
        side: side,
        entryPrice: entryPrice,
        exitPrice: exitPrice,
        pnl: pnl,
        date: DateTime.now().subtract(Duration(days: index)),
        quantity: 10000 + (index * 5000),
        status: 'Closed',
        duration: Duration(hours: 2 + index, minutes: 15),
      );
    });
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Row(
              children: [
                Icon(
                  Icons.list_alt,
                  color: const Color(0xFF3B82F6),
                  size: 20,
                ),
                const SizedBox(width: 8),
                Text(
                  'Recent Trades',
                  style: Theme.of(context).textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.w600,
                  ),
                ),
              ],
            ),
            TextButton.icon(
              onPressed: () => _showAllTrades(),
              icon: const Icon(Icons.arrow_forward, size: 16),
              label: const Text('View All'),
              style: TextButton.styleFrom(
                foregroundColor: const Color(0xFF3B82F6),
              ),
            ),
          ],
        ),
        const SizedBox(height: 16),
        if (_isLoading)
          _buildLoadingState()
        else
          _buildTradesList(),
      ],
    );
  }

  Widget _buildLoadingState() {
    return Column(
      children: List.generate(5, (index) => _buildLoadingTradeItem()),
    );
  }

  Widget _buildLoadingTradeItem() {
    return Card(
      margin: const EdgeInsets.only(bottom: 12),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Row(
          children: [
            Container(
              width: 40,
              height: 40,
              decoration: BoxDecoration(
                color: Colors.white.withValues(alpha: 0.1),
                borderRadius: BorderRadius.circular(8),
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Container(
                    width: 100,
                    height: 16,
                    decoration: BoxDecoration(
                      color: Colors.white.withValues(alpha: 0.1),
                      borderRadius: BorderRadius.circular(4),
                    ),
                  ),
                  const SizedBox(height: 8),
                  Container(
                    width: 150,
                    height: 12,
                    decoration: BoxDecoration(
                      color: Colors.white.withValues(alpha: 0.1),
                      borderRadius: BorderRadius.circular(4),
                    ),
                  ),
                ],
              ),
            ),
            Container(
              width: 60,
              height: 16,
              decoration: BoxDecoration(
                color: Colors.white.withValues(alpha: 0.1),
                borderRadius: BorderRadius.circular(4),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildTradesList() {
    return Column(
      children: _trades.map((trade) => _buildTradeItem(trade)).toList(),
    );
  }

  Widget _buildTradeItem(TradeData trade) {
    final isProfitable = trade.pnl >= 0;
    final pnlColor = isProfitable 
        ? const Color(0xFF10B981) 
        : const Color(0xFFEF4444);
    
    return Card(
      margin: const EdgeInsets.only(bottom: 12),
      child: InkWell(
        onTap: () => _showTradeDetails(trade),
        borderRadius: BorderRadius.circular(8),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Row(
            children: [
              // Symbol and Side Icon
              Container(
                width: 40,
                height: 40,
                decoration: BoxDecoration(
                  color: pnlColor.withValues(alpha: 0.1),
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: pnlColor.withValues(alpha: 0.3)),
                ),
                child: Icon(
                  trade.side == 'Long' ? Icons.trending_up : Icons.trending_down,
                  color: pnlColor,
                  size: 20,
                ),
              ),
              const SizedBox(width: 16),
              // Trade Details
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Text(
                          trade.symbol,
                          style: Theme.of(context).textTheme.titleMedium?.copyWith(
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                        const SizedBox(width: 8),
                        Container(
                          padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                          decoration: BoxDecoration(
                            color: pnlColor.withValues(alpha: 0.1),
                            borderRadius: BorderRadius.circular(4),
                          ),
                          child: Text(
                            trade.side,
                            style: TextStyle(
                              color: pnlColor,
                              fontSize: 10,
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                        ),
                        const Spacer(),
                        Text(
                          '${trade.status}',
                          style: Theme.of(context).textTheme.bodySmall?.copyWith(
                            color: Colors.white.withValues(alpha: 0.7),
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 4),
                    Row(
                      children: [
                        Text(
                          'Entry: ${trade.entryPrice.toStringAsFixed(5)}',
                          style: Theme.of(context).textTheme.bodySmall?.copyWith(
                            color: Colors.white.withValues(alpha: 0.7),
                          ),
                        ),
                        const SizedBox(width: 16),
                        Text(
                          'Exit: ${trade.exitPrice?.toStringAsFixed(5) ?? 'Open'}',
                          style: Theme.of(context).textTheme.bodySmall?.copyWith(
                            color: Colors.white.withValues(alpha: 0.7),
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
              // P&L and Date
              Column(
                crossAxisAlignment: CrossAxisAlignment.end,
                children: [
                  Text(
                    '${isProfitable ? '+' : ''}\$${trade.pnl.toStringAsFixed(2)}',
                    style: Theme.of(context).textTheme.titleMedium?.copyWith(
                      color: pnlColor,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    _formatDate(trade.date),
                    style: Theme.of(context).textTheme.bodySmall?.copyWith(
                      color: Colors.white.withValues(alpha: 0.7),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  String _formatDate(DateTime date) {
    final now = DateTime.now();
    final difference = now.difference(date);
    
    if (difference.inDays == 0) {
      return 'Today';
    } else if (difference.inDays == 1) {
      return 'Yesterday';
    } else if (difference.inDays < 7) {
      return '${difference.inDays}d ago';
    } else {
      return '${date.day}/${date.month}';
    }
  }

  void _showTradeDetails(TradeData trade) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('${trade.symbol} - ${trade.side}'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _buildDetailRow('Status', trade.status),
            _buildDetailRow('Entry Price', trade.entryPrice.toStringAsFixed(5)),
            if (trade.exitPrice != null)
              _buildDetailRow('Exit Price', trade.exitPrice!.toStringAsFixed(5)),
            _buildDetailRow('Quantity', '${trade.quantity.toStringAsFixed(0)} units'),
            _buildDetailRow('P&L', '${trade.pnl >= 0 ? '+' : ''}\$${trade.pnl.toStringAsFixed(2)}'),
            _buildDetailRow('Duration', '${trade.duration.inHours}h ${trade.duration.inMinutes % 60}m'),
            _buildDetailRow('Date', '${trade.date.day}/${trade.date.month}/${trade.date.year}'),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Close'),
          ),
        ],
      ),
    );
  }

  Widget _buildDetailRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 8),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            '$label:',
            style: const TextStyle(fontWeight: FontWeight.w500),
          ),
          Text(value),
        ],
      ),
    );
  }

  void _showAllTrades() {
    // Navigate to full trades screen
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Navigate to full trades screen'),
        duration: Duration(seconds: 2),
      ),
    );
  }

  Future<void> _refreshTrades() async {
    await _loadRecentTrades();
  }
}

class TradeData {
  final String id;
  final String symbol;
  final String side;
  final double entryPrice;
  final double? exitPrice;
  final double pnl;
  final DateTime date;
  final double quantity;
  final String status;
  final Duration duration;

  TradeData({
    required this.id,
    required this.symbol,
    required this.side,
    required this.entryPrice,
    this.exitPrice,
    required this.pnl,
    required this.date,
    required this.quantity,
    required this.status,
    required this.duration,
  });
}