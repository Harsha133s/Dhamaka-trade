// Auto-generated by TradeVerseAI Agent
// Purpose: Central space for users to log, edit, and view all trades with notes, performance data, and chart images

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../app/dialogs/new_trade_dialog.dart';
import 'widgets/trade_section.dart';
import 'pages/trade_detail_page.dart';
import 'models/trade_model.dart';
import 'providers/trades_provider.dart';

class JournalPage extends ConsumerStatefulWidget {
  const JournalPage({super.key});

  @override
  ConsumerState<JournalPage> createState() => _JournalPageState();
}

class _JournalPageState extends ConsumerState<JournalPage>
    with TickerProviderStateMixin {
  late TabController _tabController;
  
  // Filter and sort options
  String _selectedFilter = 'All';
  String _selectedSort = 'Date';
  bool _isAscending = false;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 3, vsync: this);
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final tradesAsync = ref.watch(tradesProvider);
    
    return Scaffold(
      body: CustomScrollView(
        slivers: [
          _buildAppBar(context),
          _buildFilterAndSort(),
          tradesAsync.when(
            data: (trades) => _buildTradesList(trades),
            loading: () => const SliverFillRemaining(
              child: Center(child: CircularProgressIndicator()),
            ),
            error: (error, stack) => SliverFillRemaining(
              child: Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(Icons.error_outline, size: 64, color: Colors.grey),
                    const SizedBox(height: 16),
                    Text('Error loading trades: $error'),
                    const SizedBox(height: 16),
                    ElevatedButton(
                      onPressed: () => ref.refresh(tradesProvider),
                      child: const Text('Retry'),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildAppBar(BuildContext context) {
    return SliverAppBar(
      expandedHeight: 120.0,
      floating: false,
      pinned: true,
      backgroundColor: Theme.of(context).scaffoldBackgroundColor,
      flexibleSpace: FlexibleSpaceBar(
        title: const Text(
          'Trade Journal',
          style: TextStyle(
            fontSize: 28,
            fontWeight: FontWeight.bold,
          ),
        ),
        background: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [
                Theme.of(context).primaryColor.withValues(alpha: 0.1),
                Theme.of(context).primaryColor.withValues(alpha: 0.05),
              ],
            ),
          ),
        ),
      ),
      actions: [
        PopupMenuButton<String>(
          icon: const Icon(Icons.more_vert),
          onSelected: (value) {
            switch (value) {
              case 'export':
                _exportTrades();
                break;
              case 'import':
                _importTrades();
                break;
              case 'analytics':
                _viewAnalytics();
                break;
            }
          },
          itemBuilder: (context) => [
            const PopupMenuItem(
              value: 'export',
              child: ListTile(
                leading: Icon(Icons.file_download),
                title: Text('Export Trades'),
                dense: true,
              ),
            ),
            const PopupMenuItem(
              value: 'import',
              child: ListTile(
                leading: Icon(Icons.file_upload),
                title: Text('Import Trades'),
                dense: true,
              ),
            ),
            const PopupMenuItem(
              value: 'analytics',
              child: ListTile(
                leading: Icon(Icons.analytics),
                title: Text('View Analytics'),
                dense: true,
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildFilterAndSort() {
    return SliverToBoxAdapter(
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
        child: Row(
          children: [
            // Filter dropdown
            Expanded(
              child: Container(
                padding: const EdgeInsets.symmetric(horizontal: 12),
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.grey.withValues(alpha: 0.3)),
                ),
                child: DropdownButtonHideUnderline(
                  child: DropdownButton<String>(
                    value: _selectedFilter,
                    icon: const Icon(Icons.filter_list),
                    items: ['All', 'Profitable', 'Losing', 'Open', 'Closed']
                        .map((filter) => DropdownMenuItem(
                              value: filter,
                              child: Text(filter),
                            ))
                        .toList(),
                    onChanged: (value) {
                      setState(() {
                        _selectedFilter = value ?? 'All';
                      });
                    },
                  ),
                ),
              ),
            ),
            const SizedBox(width: 12),
            // Sort dropdown
            Expanded(
              child: Container(
                padding: const EdgeInsets.symmetric(horizontal: 12),
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.grey.withValues(alpha: 0.3)),
                ),
                child: DropdownButtonHideUnderline(
                  child: DropdownButton<String>(
                    value: _selectedSort,
                    icon: const Icon(Icons.sort),
                    items: ['Date', 'Symbol', 'P&L', 'Type']
                        .map((sort) => DropdownMenuItem(
                              value: sort,
                              child: Text(sort),
                            ))
                        .toList(),
                    onChanged: (value) {
                      setState(() {
                        _selectedSort = value ?? 'Date';
                      });
                    },
                  ),
                ),
              ),
            ),
            const SizedBox(width: 8),
            // Sort direction toggle
            IconButton(
              onPressed: () {
                setState(() {
                  _isAscending = !_isAscending;
                });
              },
              icon: Icon(
                _isAscending ? Icons.arrow_upward : Icons.arrow_downward,
                color: Theme.of(context).primaryColor,
              ),
              tooltip: _isAscending ? 'Ascending' : 'Descending',
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildTradesList(List<Trade> allTrades) {
    final filteredTrades = _filterTrades(allTrades);
    final sortedTrades = _sortTrades(filteredTrades);
    
    if (sortedTrades.isEmpty) {
      return const SliverFillRemaining(
        child: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(Icons.trending_up, size: 64, color: Colors.grey),
              SizedBox(height: 16),
              Text(
                'No trades found',
                style: TextStyle(fontSize: 18, color: Colors.grey),
              ),
              SizedBox(height: 8),
              Text(
                'Start by adding your first trade!',
                style: TextStyle(color: Colors.grey),
              ),
            ],
          ),
        ),
      );
    }

    // Group trades by categories
    final recentTrades = _getRecentTrades(sortedTrades);
    final profitableTrades = _getProfitableTrades(sortedTrades);
    final losingTrades = _getLosingTrades(sortedTrades);

    return SliverList(
      delegate: SliverChildListDelegate([
        const SizedBox(height: 16),
        
        // Recent Trades Section
        if (recentTrades.isNotEmpty) ...[
          TradeSection(
            title: 'Recent Trades',
            subtitle: '${recentTrades.length} trades from the last 7 days',
            icon: Icons.access_time,
            trades: recentTrades,
            onTradeTap: _navigateToTradeDetail,
            maxItems: 5,
          ),
          const SizedBox(height: 24),
        ],

        // Profitable Trades Section
        if (profitableTrades.isNotEmpty) ...[
          TradeSection(
            title: 'Profitable Trades',
            subtitle: '${profitableTrades.length} winning trades',
            icon: Icons.trending_up,
            color: Colors.green,
            trades: profitableTrades,
            onTradeTap: _navigateToTradeDetail,
            maxItems: 5,
          ),
          const SizedBox(height: 24),
        ],

        // Losing Trades Section
        if (losingTrades.isNotEmpty) ...[
          TradeSection(
            title: 'Losing Trades',
            subtitle: '${losingTrades.length} trades to learn from',
            icon: Icons.trending_down,
            color: Colors.red,
            trades: losingTrades,
            onTradeTap: _navigateToTradeDetail,
            maxItems: 5,
          ),
          const SizedBox(height: 24),
        ],

        // All Trades Section (if showing all)
        if (_selectedFilter == 'All') ...[
          TradeSection(
            title: 'All Trades',
            subtitle: '${sortedTrades.length} total trades',
            icon: Icons.list_alt,
            trades: sortedTrades,
            onTradeTap: _navigateToTradeDetail,
            showAll: true,
          ),
        ],

        const SizedBox(height: 100), // Space for FAB
      ]),
    );
  }


  // Filter and sort methods
  List<Trade> _filterTrades(List<Trade> trades) {
    switch (_selectedFilter) {
      case 'Profitable':
        return trades.where((trade) => trade.pnl > 0).toList();
      case 'Losing':
        return trades.where((trade) => trade.pnl < 0).toList();
      case 'Open':
        return trades.where((trade) => trade.status == TradeStatus.open).toList();
      case 'Closed':
        return trades.where((trade) => trade.status == TradeStatus.closed).toList();
      default:
        return trades;
    }
  }

  List<Trade> _sortTrades(List<Trade> trades) {
    final sortedTrades = List<Trade>.from(trades);
    
    sortedTrades.sort((a, b) {
      int comparison = 0;
      
      switch (_selectedSort) {
        case 'Date':
          comparison = a.entryTime.compareTo(b.entryTime);
          break;
        case 'Symbol':
          comparison = a.symbol.compareTo(b.symbol);
          break;
        case 'P&L':
          comparison = a.pnl.compareTo(b.pnl);
          break;
        case 'Type':
          comparison = a.type.toString().compareTo(b.type.toString());
          break;
      }
      
      return _isAscending ? comparison : -comparison;
    });
    
    return sortedTrades;
  }

  // Category methods
  List<Trade> _getRecentTrades(List<Trade> trades) {
    final sevenDaysAgo = DateTime.now().subtract(const Duration(days: 7));
    return trades
        .where((trade) => trade.entryTime.isAfter(sevenDaysAgo))
        .take(10)
        .toList();
  }

  List<Trade> _getProfitableTrades(List<Trade> trades) {
    return trades
        .where((trade) => trade.pnl > 0)
        .take(10)
        .toList();
  }

  List<Trade> _getLosingTrades(List<Trade> trades) {
    return trades
        .where((trade) => trade.pnl < 0)
        .take(10)
        .toList();
  }

  // Action methods
  void _openNewTradeDialog() {
    showDialog<void>(
      context: context,
      barrierDismissible: true,
      builder: (BuildContext context) {
        return const NewTradeDialog();
      },
    );
  }

  void _navigateToTradeDetail(Trade trade) {
    Navigator.of(context).push(
      MaterialPageRoute(
        builder: (context) => TradeDetailPage(trade: trade),
      ),
    );
  }

  void _exportTrades() {
    // TODO: Implement trade export functionality
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Export functionality coming soon!'),
        backgroundColor: Colors.blue,
      ),
    );
  }

  void _importTrades() {
    // TODO: Implement trade import functionality
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Import functionality coming soon!'),
        backgroundColor: Colors.blue,
      ),
    );
  }

  void _viewAnalytics() {
    // TODO: Navigate to analytics page or show analytics dialog
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Analytics page coming soon!'),
        backgroundColor: Colors.blue,
      ),
    );
  }
}