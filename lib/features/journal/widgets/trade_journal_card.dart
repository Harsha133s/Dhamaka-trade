// Auto-generated by TradeVerseAI Agent
// Purpose: Modern glassmorphic trade journal card with enhanced visual hierarchy

import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:flutter_animate/flutter_animate.dart';
import '../models/trade_model.dart';
import '../../../core/widgets/glassmorphic_components.dart';
import '../../../core/theme/app_tokens.dart';

class TradeJournalCard extends StatelessWidget {
  final Trade trade;
  final VoidCallback? onTap;
  final VoidCallback? onEdit;
  final VoidCallback? onDelete;
  final bool showActions;

  const TradeJournalCard({
    super.key,
    required this.trade,
    this.onTap,
    this.onEdit,
    this.onDelete,
    this.showActions = false,
  });

  @override
  Widget build(BuildContext context) {
    final pnlColor = trade.pnl > 0 
        ? AppColors.success 
        : trade.pnl < 0 
            ? AppColors.danger 
            : AppColors.textSecondary;

    final isProfit = trade.pnl > 0;
    final isLoss = trade.pnl < 0;

    return GlassContainer(
      margin: const EdgeInsets.only(bottom: 16),
      onTap: onTap,
      gradient: isProfit 
          ? const LinearGradient(
              colors: [Color(0x0F00D97E), Color(0x0500D97E)],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            )
          : isLoss 
              ? const LinearGradient(
                  colors: [Color(0x0FFF5C5C), Color(0x05FF5C5C)],
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                )
              : AppColors.cardGlassGradient,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildModernHeader(context, pnlColor),
          const SizedBox(height: 20),
          _buildModernTradeDetails(context),
          if (trade.notes.isNotEmpty) ...[
            const SizedBox(height: 16),
            _buildModernNotes(context),
          ],
          if (showActions) ...[
            const SizedBox(height: 16),
            _buildModernActions(context),
          ],
        ],
      ),
    ).animate()
      .fadeIn(duration: 500.ms)
      .slideX(begin: 0.1, duration: 500.ms, curve: Curves.easeOut);
  }

  Widget _buildModernHeader(BuildContext context, Color pnlColor) {
    final tradeTypeColor = trade.type == TradeType.buy ? AppColors.success : AppColors.danger;
    
    return Row(
      children: [
        // Modern trade type badge
        Container(
          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: trade.type == TradeType.buy 
                  ? [AppColors.success.withValues(alpha: 0.2), AppColors.success.withValues(alpha: 0.1)]
                  : [AppColors.danger.withValues(alpha: 0.2), AppColors.danger.withValues(alpha: 0.1)],
            ),
            borderRadius: BorderRadius.circular(12),
            border: Border.all(
              color: tradeTypeColor.withValues(alpha: 0.3),
              width: 1,
            ),
          ),
          child: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              Container(
                padding: const EdgeInsets.all(4),
                decoration: BoxDecoration(
                  color: tradeTypeColor.withValues(alpha: 0.2),
                  shape: BoxShape.circle,
                ),
                child: Icon(
                  trade.type == TradeType.buy 
                      ? Icons.trending_up 
                      : Icons.trending_down,
                  color: tradeTypeColor,
                  size: 14,
                ),
              ),
              const SizedBox(width: 8),
              Text(
                trade.typeDisplayName,
                style: TextStyle(
                  color: tradeTypeColor,
                  fontWeight: FontWeight.w700,
                  fontSize: 13,
                ),
              ),
            ],
          ),
        ),
        const SizedBox(width: 12),
        
        // Symbol with enhanced styling
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                trade.symbol,
                style: Theme.of(context).textTheme.titleLarge?.copyWith(
                  fontWeight: FontWeight.w800,
                  color: AppColors.textPrimary,
                  fontSize: 20,
                ),
              ),
              Text(
                DateFormat('MMM dd, HH:mm').format(trade.entryTime),
                style: Theme.of(context).textTheme.bodySmall?.copyWith(
                  color: AppColors.textSecondary,
                  fontSize: 12,
                ),
              ),
            ],
          ),
        ),
        
        // P&L with prominence
        Column(
          crossAxisAlignment: CrossAxisAlignment.end,
          children: [
            Text(
              trade.formattedPnl,
              style: Theme.of(context).textTheme.titleLarge?.copyWith(
                color: pnlColor,
                fontWeight: FontWeight.w800,
                fontSize: 18,
              ),
            ),
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
              decoration: BoxDecoration(
                color: trade.isOpen 
                    ? AppColors.warning.withValues(alpha: 0.15)
                    : AppColors.primaryAccent.withValues(alpha: 0.15),
                borderRadius: BorderRadius.circular(8),
                border: Border.all(
                  color: trade.isOpen 
                      ? AppColors.warning.withValues(alpha: 0.3)
                      : AppColors.primaryAccent.withValues(alpha: 0.3),
                  width: 1,
                ),
              ),
              child: Text(
                trade.statusDisplayName,
                style: TextStyle(
                  color: trade.isOpen ? AppColors.warning : AppColors.primaryAccent,
                  fontWeight: FontWeight.w600,
                  fontSize: 11,
                ),
              ),
            ),
          ],
        ),
      ],
    );
  }
  
  // Keep original header for fallback
  Widget _buildHeader(BuildContext context, Color pnlColor) {
    return _buildModernHeader(context, pnlColor);
  }
  
  Widget _buildModernTradeDetails(BuildContext context) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: AppColors.glassHighlight,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: AppColors.glassBorder.withValues(alpha: 0.3),
          width: 1,
        ),
      ),
      child: Column(
        children: [
          // Trade metrics in a grid
          Row(
            children: [
              Expanded(
                child: _buildModernMetricItem(
                  context,
                  'Entry Price',
                  trade.formattedEntryPrice,
                  Icons.login_outlined,
                  AppColors.primaryAccent,
                ),
              ),
              Container(
                width: 1,
                height: 40,
                color: AppColors.divider,
                margin: const EdgeInsets.symmetric(horizontal: 12),
              ),
              Expanded(
                child: _buildModernMetricItem(
                  context,
                  'Exit Price',
                  trade.formattedExitPrice,
                  Icons.logout_outlined,
                  AppColors.textSecondary,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          Row(
            children: [
              Expanded(
                child: _buildModernMetricItem(
                  context,
                  'Quantity',
                  trade.quantity.toString(),
                  Icons.pie_chart_outline,
                  AppColors.textSecondary,
                ),
              ),
              Container(
                width: 1,
                height: 40,
                color: AppColors.divider,
                margin: const EdgeInsets.symmetric(horizontal: 12),
              ),
              Expanded(
                child: _buildModernMetricItem(
                  context,
                  'Duration',
                  trade.holdingPeriodString,
                  Icons.schedule_outlined,
                  AppColors.textSecondary,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }
  
  Widget _buildModernMetricItem(
    BuildContext context,
    String label,
    String value,
    IconData icon,
    Color iconColor,
  ) {
    return Column(
      children: [
        Container(
          padding: const EdgeInsets.all(8),
          decoration: BoxDecoration(
            color: iconColor.withValues(alpha: 0.1),
            borderRadius: BorderRadius.circular(8),
          ),
          child: Icon(
            icon,
            color: iconColor,
            size: 16,
          ),
        ),
        const SizedBox(height: 8),
        Text(
          label,
          style: Theme.of(context).textTheme.bodySmall?.copyWith(
            color: AppColors.textSecondary,
            fontSize: 11,
            fontWeight: FontWeight.w500,
          ),
        ),
        const SizedBox(height: 4),
        Text(
          value,
          style: Theme.of(context).textTheme.bodyMedium?.copyWith(
            color: AppColors.textPrimary,
            fontWeight: FontWeight.w700,
            fontSize: 14,
          ),
        ),
      ],
    );
  }

  Widget _buildTradeDetails(BuildContext context) {
    return Column(
      children: [
        // First row: Entry/Exit prices and P&L
        Row(
          children: [
            Expanded(
              child: _buildDetailItem(
                context,
                'Entry',
                trade.formattedEntryPrice,
                Icons.login,
              ),
            ),
            Expanded(
              child: _buildDetailItem(
                context,
                'Exit',
                trade.formattedExitPrice,
                Icons.logout,
              ),
            ),
            Expanded(
              child: _buildDetailItem(
                context,
                'P&L',
                trade.formattedPnl,
                Icons.attach_money,
                valueColor: trade.pnl > 0 
                    ? Colors.green 
                    : trade.pnl < 0 
                        ? Colors.red 
                        : Colors.grey,
              ),
            ),
          ],
        ),
        
        const SizedBox(height: 12),
        
        // Second row: Quantity, Timeframe, and Duration
        Row(
          children: [
            Expanded(
              child: _buildDetailItem(
                context,
                'Quantity',
                trade.quantity.toString(),
                Icons.pie_chart,
              ),
            ),
            Expanded(
              child: _buildDetailItem(
                context,
                'Timeframe',
                trade.timeframeDisplayName,
                Icons.schedule,
              ),
            ),
            Expanded(
              child: _buildDetailItem(
                context,
                'Duration',
                trade.holdingPeriodString,
                Icons.timer,
              ),
            ),
          ],
        ),
        
        const SizedBox(height: 8),
        
        // Entry time
        Row(
          children: [
            Icon(
              Icons.access_time,
              size: 16,
              color: Colors.grey[600],
            ),
            const SizedBox(width: 4),
            Text(
              DateFormat('MMM dd, yyyy HH:mm').format(trade.entryTime),
              style: Theme.of(context).textTheme.bodySmall?.copyWith(
                    color: Colors.grey[600],
                  ),
            ),
          ],
        ),
      ],
    );
  }
  
  Widget _buildModernNotes(BuildContext context) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: AppColors.glassHighlight,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: AppColors.glassBorder.withValues(alpha: 0.3),
          width: 1,
        ),
      ),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Container(
            padding: const EdgeInsets.all(6),
            decoration: BoxDecoration(
              color: AppColors.primaryAccent.withValues(alpha: 0.1),
              borderRadius: BorderRadius.circular(6),
            ),
            child: Icon(
              Icons.note_alt_outlined,
              size: 16,
              color: AppColors.primaryAccent,
            ),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'Notes',
                  style: Theme.of(context).textTheme.bodySmall?.copyWith(
                    color: AppColors.textSecondary,
                    fontWeight: FontWeight.w600,
                    fontSize: 11,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  trade.notes,
                  style: Theme.of(context).textTheme.bodySmall?.copyWith(
                    color: AppColors.textPrimary,
                    fontStyle: FontStyle.italic,
                    height: 1.4,
                  ),
                  maxLines: 3,
                  overflow: TextOverflow.ellipsis,
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
  
  Widget _buildModernActions(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.end,
      children: [
        if (onEdit != null)
          GlassButton(
            text: 'Edit',
            isPrimary: false,
            width: 80,
            height: 36,
            onPressed: onEdit,
            icon: const Icon(
              Icons.edit_outlined,
              size: 16,
              color: AppColors.primaryAccent,
            ),
          ),
        if (onEdit != null && onDelete != null) const SizedBox(width: 8),
        if (onDelete != null)
          GlassButton(
            text: 'Delete',
            isPrimary: false,
            width: 90,
            height: 36,
            onPressed: onDelete,
            icon: const Icon(
              Icons.delete_outline,
              size: 16,
              color: AppColors.danger,
            ),
          ),
      ],
    );
  }

  Widget _buildDetailItem(
    BuildContext context,
    String label,
    String value,
    IconData icon, {
    Color? valueColor,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Icon(
              icon,
              size: 14,
              color: Colors.grey[600],
            ),
            const SizedBox(width: 4),
            Text(
              label,
              style: Theme.of(context).textTheme.bodySmall?.copyWith(
                    color: Colors.grey[600],
                    fontWeight: FontWeight.w500,
                  ),
            ),
          ],
        ),
        const SizedBox(height: 2),
        Text(
          value,
          style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                fontWeight: FontWeight.w600,
                color: valueColor,
              ),
        ),
      ],
    );
  }

  Widget _buildNotes(BuildContext context) {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.grey.withValues(alpha: 0.1),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Icon(
            Icons.note,
            size: 16,
            color: Colors.grey[600],
          ),
          const SizedBox(width: 8),
          Expanded(
            child: Text(
              trade.notes,
              style: Theme.of(context).textTheme.bodySmall?.copyWith(
                    color: Colors.grey[700],
                    fontStyle: FontStyle.italic,
                  ),
              maxLines: 2,
              overflow: TextOverflow.ellipsis,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildActions(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.end,
      children: [
        if (onEdit != null)
          TextButton.icon(
            onPressed: onEdit,
            icon: const Icon(Icons.edit, size: 16),
            label: const Text('Edit'),
            style: TextButton.styleFrom(
              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
            ),
          ),
        if (onDelete != null)
          TextButton.icon(
            onPressed: onDelete,
            icon: const Icon(Icons.delete, size: 16, color: Colors.red),
            label: const Text('Delete', style: TextStyle(color: Colors.red)),
            style: TextButton.styleFrom(
              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
            ),
          ),
      ],
    );
  }
}