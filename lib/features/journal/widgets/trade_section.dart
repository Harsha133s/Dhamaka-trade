// Auto-generated by TradeVerseAI Agent
// Purpose: TradeSection widget for grouping and displaying trades by category

import 'package:flutter/material.dart';
import '../models/trade_model.dart';
import 'trade_journal_card.dart';

class TradeSection extends StatelessWidget {
  final String title;
  final String? subtitle;
  final IconData icon;
  final Color? color;
  final List<Trade> trades;
  final Function(Trade) onTradeTap;
  final int maxItems;
  final bool showAll;

  const TradeSection({
    super.key,
    required this.title,
    this.subtitle,
    required this.icon,
    this.color,
    required this.trades,
    required this.onTradeTap,
    this.maxItems = 10,
    this.showAll = false,
  });

  @override
  Widget build(BuildContext context) {
    if (trades.isEmpty) {
      return const SizedBox.shrink();
    }

    final displayTrades = showAll ? trades : trades.take(maxItems).toList();
    final hasMore = trades.length > maxItems && !showAll;
    final sectionColor = color ?? Theme.of(context).primaryColor;

    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildSectionHeader(context, sectionColor, hasMore),
          const SizedBox(height: 12),
          _buildTradesList(displayTrades),
          if (hasMore) _buildShowMoreButton(context, sectionColor),
        ],
      ),
    );
  }

  Widget _buildSectionHeader(BuildContext context, Color sectionColor, bool hasMore) {
    return Row(
      children: [
        Container(
          padding: const EdgeInsets.all(8),
          decoration: BoxDecoration(
            color: sectionColor.withValues(alpha: 0.1),
            borderRadius: BorderRadius.circular(8),
          ),
          child: Icon(
            icon,
            color: sectionColor,
            size: 20,
          ),
        ),
        const SizedBox(width: 12),
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                title,
                style: Theme.of(context).textTheme.titleLarge?.copyWith(
                      fontWeight: FontWeight.bold,
                      color: sectionColor,
                    ),
              ),
              if (subtitle != null)
                Text(
                  subtitle!,
                  style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                        color: Colors.grey[600],
                      ),
                ),
            ],
          ),
        ),
        if (hasMore)
          TextButton(
            onPressed: () {
              // TODO: Navigate to full section view or expand section
            },
            child: Text(
              'View All',
              style: TextStyle(color: sectionColor),
            ),
          ),
      ],
    );
  }

  Widget _buildTradesList(List<Trade> displayTrades) {
    return Column(
      children: displayTrades.map((trade) {
        return Padding(
          padding: const EdgeInsets.only(bottom: 8),
          child: TradeJournalCard(
            trade: trade,
            onTap: () => onTradeTap(trade),
          ),
        );
      }).toList(),
    );
  }

  Widget _buildShowMoreButton(BuildContext context, Color sectionColor) {
    return Container(
      width: double.infinity,
      margin: const EdgeInsets.only(top: 8),
      child: OutlinedButton.icon(
        onPressed: () {
          // TODO: Show more trades or navigate to detailed view
        },
        icon: Icon(
          Icons.expand_more,
          color: sectionColor,
        ),
        label: Text(
          'Show ${trades.length - maxItems} more',
          style: TextStyle(color: sectionColor),
        ),
        style: OutlinedButton.styleFrom(
          side: BorderSide(color: sectionColor.withValues(alpha: 0.5)),
          padding: const EdgeInsets.symmetric(vertical: 12),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8),
          ),
        ),
      ),
    );
  }
}