// Auto-generated by TradeVerseAI Agent
// Purpose: Trade detail page showing comprehensive trade information with chart images

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';
import '../models/trade_model.dart';
import '../providers/trades_provider.dart';
import '../widgets/image_picker_field.dart';

class TradeDetailPage extends ConsumerStatefulWidget {
  final Trade trade;

  const TradeDetailPage({super.key, required this.trade});

  @override
  ConsumerState<TradeDetailPage> createState() => _TradeDetailPageState();
}

class _TradeDetailPageState extends ConsumerState<TradeDetailPage> {
  bool _isEditMode = false;
  late TextEditingController _notesController;
  late TextEditingController _exitPriceController;

  @override
  void initState() {
    super.initState();
    _notesController = TextEditingController(text: widget.trade.notes);
    _exitPriceController = TextEditingController(
      text: widget.trade.exitPrice?.toString() ?? '',
    );
  }

  @override
  void dispose() {
    _notesController.dispose();
    _exitPriceController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: _buildAppBar(),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _buildTradeHeader(),
            const SizedBox(height: 24),
            _buildTradeMetrics(),
            const SizedBox(height: 24),
            _buildTradeDetails(),
            const SizedBox(height: 24),
            _buildNotesSection(),
            const SizedBox(height: 24),
            _buildAttachedImages(),
            const SizedBox(height: 24),
            if (widget.trade.isOpen) _buildCloseTradeSection(),
          ],
        ),
      ),
    );
  }

  AppBar _buildAppBar() {
    return AppBar(
      title: Text('${widget.trade.symbol} Trade'),
      elevation: 0,
      actions: [
        if (!_isEditMode)
          IconButton(
            onPressed: () {
              setState(() {
                _isEditMode = true;
              });
            },
            icon: const Icon(Icons.edit),
            tooltip: 'Edit Trade',
          ),
        if (_isEditMode) ...[
          TextButton(
            onPressed: _cancelEdit,
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: _saveChanges,
            child: const Text('Save'),
          ),
        ],
        PopupMenuButton<String>(
          onSelected: (value) {
            switch (value) {
              case 'delete':
                _showDeleteDialog();
                break;
              case 'duplicate':
                _duplicateTrade();
                break;
            }
          },
          itemBuilder: (context) => [
            const PopupMenuItem(
              value: 'duplicate',
              child: ListTile(
                leading: Icon(Icons.copy),
                title: Text('Duplicate Trade'),
                dense: true,
              ),
            ),
            const PopupMenuItem(
              value: 'delete',
              child: ListTile(
                leading: Icon(Icons.delete, color: Colors.red),
                title: Text('Delete Trade', style: TextStyle(color: Colors.red)),
                dense: true,
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildTradeHeader() {
    final pnlColor = widget.trade.pnl > 0 ? Colors.green : Colors.red;
    
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            pnlColor.withValues(alpha: 0.1),
            pnlColor.withValues(alpha: 0.05),
          ],
        ),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: pnlColor.withValues(alpha: 0.2)),
      ),
      child: Column(
        children: [
          Row(
            children: [
              // Trade type badge
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                decoration: BoxDecoration(
                  color: widget.trade.type == TradeType.buy 
                      ? Colors.green.withValues(alpha: 0.1)
                      : Colors.red.withValues(alpha: 0.1),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Icon(
                      widget.trade.type == TradeType.buy 
                          ? Icons.arrow_upward 
                          : Icons.arrow_downward,
                      color: widget.trade.type == TradeType.buy 
                          ? Colors.green 
                          : Colors.red,
                      size: 18,
                    ),
                    const SizedBox(width: 4),
                    Text(
                      widget.trade.typeDisplayName,
                      style: TextStyle(
                        color: widget.trade.type == TradeType.buy 
                            ? Colors.green 
                            : Colors.red,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
              ),
              
              const SizedBox(width: 12),
              
              // Symbol
              Text(
                widget.trade.symbol,
                style: Theme.of(context).textTheme.headlineMedium?.copyWith(
                      fontWeight: FontWeight.bold,
                    ),
              ),
              
              const Spacer(),
              
              // Status
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                decoration: BoxDecoration(
                  color: widget.trade.isOpen 
                      ? Colors.orange.withValues(alpha: 0.1)
                      : Colors.blue.withValues(alpha: 0.1),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Text(
                  widget.trade.statusDisplayName,
                  style: TextStyle(
                    color: widget.trade.isOpen ? Colors.orange : Colors.blue,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ),
          
          const SizedBox(height: 16),
          
          // P&L Display
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(
                widget.trade.pnl >= 0 ? Icons.trending_up : Icons.trending_down,
                color: pnlColor,
                size: 32,
              ),
              const SizedBox(width: 8),
              Text(
                widget.trade.formattedPnl,
                style: Theme.of(context).textTheme.headlineLarge?.copyWith(
                      color: pnlColor,
                      fontWeight: FontWeight.bold,
                    ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildTradeMetrics() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Trade Metrics',
              style: Theme.of(context).textTheme.titleLarge?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
            ),
            const SizedBox(height: 16),
            GridView.count(
              crossAxisCount: 2,
              shrinkWrap: true,
              childAspectRatio: 3,
              physics: const NeverScrollableScrollPhysics(),
              children: [
                _buildMetricItem('Entry Price', widget.trade.formattedEntryPrice),
                _buildMetricItem('Exit Price', widget.trade.formattedExitPrice),
                _buildMetricItem('Quantity', widget.trade.quantity.toString()),
                _buildMetricItem('Timeframe', widget.trade.timeframeDisplayName),
                _buildMetricItem('Duration', widget.trade.holdingPeriodString),
                _buildMetricItem('Total Value', '\$${widget.trade.totalValue.toStringAsFixed(2)}'),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildMetricItem(String label, String value) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          label,
          style: Theme.of(context).textTheme.bodySmall?.copyWith(
                color: Colors.grey[600],
                fontWeight: FontWeight.w500,
              ),
        ),
        const SizedBox(height: 4),
        Text(
          value,
          style: Theme.of(context).textTheme.bodyLarge?.copyWith(
                fontWeight: FontWeight.w600,
              ),
        ),
      ],
    );
  }

  Widget _buildTradeDetails() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Trade Details',
              style: Theme.of(context).textTheme.titleLarge?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
            ),
            const SizedBox(height: 16),
            _buildDetailRow('Entry Time', DateFormat('MMM dd, yyyy HH:mm').format(widget.trade.entryTime)),
            if (widget.trade.exitTime != null)
              _buildDetailRow('Exit Time', DateFormat('MMM dd, yyyy HH:mm').format(widget.trade.exitTime!)),
            if (widget.trade.stopLoss != null)
              _buildDetailRow('Stop Loss', '\$${widget.trade.stopLoss!.toStringAsFixed(2)}'),
            if (widget.trade.takeProfit != null)
              _buildDetailRow('Take Profit', '\$${widget.trade.takeProfit!.toStringAsFixed(2)}'),
            if (widget.trade.strategy != null)
              _buildDetailRow('Strategy', widget.trade.strategy!),
            if (widget.trade.riskRewardRatio != null)
              _buildDetailRow('R:R Ratio', '1:${widget.trade.riskRewardRatio!.toStringAsFixed(1)}'),
          ],
        ),
      ),
    );
  }

  Widget _buildDetailRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 12),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 120,
            child: Text(
              label,
              style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                    color: Colors.grey[600],
                    fontWeight: FontWeight.w500,
                  ),
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                    fontWeight: FontWeight.w600,
                  ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildNotesSection() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Notes',
              style: Theme.of(context).textTheme.titleLarge?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
            ),
            const SizedBox(height: 16),
            if (_isEditMode)
              TextField(
                controller: _notesController,
                maxLines: 5,
                decoration: const InputDecoration(
                  hintText: 'Add your trade notes and observations...',
                  border: OutlineInputBorder(),
                ),
              )
            else
              Container(
                width: double.infinity,
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.grey.withValues(alpha: 0.1),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Text(
                  widget.trade.notes.isEmpty ? 'No notes available' : widget.trade.notes,
                  style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                        fontStyle: widget.trade.notes.isEmpty ? FontStyle.italic : null,
                        color: widget.trade.notes.isEmpty ? Colors.grey : null,
                      ),
                ),
              ),
          ],
        ),
      ),
    );
  }

  Widget _buildAttachedImages() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Chart Images',
              style: Theme.of(context).textTheme.titleLarge?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
            ),
            const SizedBox(height: 16),
            ImagePickerField(
              images: widget.trade.attachedImages,
              onImagesChanged: _isEditMode ? _updateImages : null,
              readOnly: !_isEditMode,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildCloseTradeSection() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Close Trade',
              style: Theme.of(context).textTheme.titleLarge?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
            ),
            const SizedBox(height: 16),
            TextField(
              controller: _exitPriceController,
              keyboardType: const TextInputType.numberWithOptions(decimal: true),
              decoration: const InputDecoration(
                labelText: 'Exit Price',
                prefixText: '\$ ',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 16),
            SizedBox(
              width: double.infinity,
              child: ElevatedButton.icon(
                onPressed: _closeTrade,
                icon: const Icon(Icons.close),
                label: const Text('Close Trade'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.orange,
                  foregroundColor: Colors.white,
                  padding: const EdgeInsets.symmetric(vertical: 12),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _cancelEdit() {
    setState(() {
      _isEditMode = false;
      _notesController.text = widget.trade.notes;
    });
  }

  void _saveChanges() async {
    try {
      final updatedTrade = widget.trade.copyWith(
        notes: _notesController.text,
        updatedAt: DateTime.now(),
      );
      
      await ref.read(tradesProvider.notifier).updateTrade(updatedTrade);
      
      setState(() {
        _isEditMode = false;
      });
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Trade updated successfully'),
            backgroundColor: Colors.green,
          ),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error updating trade: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  void _updateImages(List<String> images) {
    // TODO: Implement image update functionality
  }

  void _closeTrade() async {
    final exitPrice = double.tryParse(_exitPriceController.text);
    if (exitPrice == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Please enter a valid exit price'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    try {
      await ref.read(tradesProvider.notifier).closeTrade(
        widget.trade.id,
        exitPrice,
        notes: _notesController.text,
      );
      
      if (mounted) {
        Navigator.of(context).pop();
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Trade closed successfully'),
            backgroundColor: Colors.green,
          ),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error closing trade: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  void _showDeleteDialog() {
    showDialog<void>(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text('Delete Trade'),
          content: Text('Are you sure you want to delete this ${widget.trade.symbol} trade?'),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('Cancel'),
            ),
            TextButton(
              onPressed: () async {
                Navigator.of(context).pop();
                await _deleteTrade();
              },
              style: TextButton.styleFrom(foregroundColor: Colors.red),
              child: const Text('Delete'),
            ),
          ],
        );
      },
    );
  }

  Future<void> _deleteTrade() async {
    try {
      await ref.read(tradesProvider.notifier).deleteTrade(widget.trade.id);
      
      if (mounted) {
        Navigator.of(context).pop();
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Trade deleted successfully'),
            backgroundColor: Colors.green,
          ),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error deleting trade: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  void _duplicateTrade() {
    // TODO: Implement trade duplication functionality
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Duplicate functionality coming soon!'),
        backgroundColor: Colors.blue,
      ),
    );
  }
}