// Auto-generated by TradeVerseAI Agent
// Purpose: CreatePostCard widget for creating new posts with caption and image

import 'package:flutter/material.dart';
import 'package:uuid/uuid.dart';
import '../models/post_model.dart';

class CreatePostCard extends StatefulWidget {
  final Function(Post) onPostCreated;

  const CreatePostCard({
    super.key,
    required this.onPostCreated,
  });

  @override
  State<CreatePostCard> createState() => _CreatePostCardState();
}

class _CreatePostCardState extends State<CreatePostCard> {
  final TextEditingController _textController = TextEditingController();
  final FocusNode _focusNode = FocusNode();
  bool _isExpanded = false;
  bool _isPosting = false;
  PostType _selectedType = PostType.general;
  final List<String> _attachedImages = [];
  TradeData? _tradeData;

  @override
  void dispose() {
    _textController.dispose();
    _focusNode.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: EdgeInsets.zero,
      elevation: 2,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _buildHeader(),
            const SizedBox(height: 12),
            _buildTextField(),
            if (_isExpanded) ...[
              const SizedBox(height: 16),
              _buildTypeSelector(),
              if (_selectedType == PostType.trade) ...[
                const SizedBox(height: 16),
                _buildTradeDataInput(),
              ],
              const SizedBox(height: 16),
              _buildAttachmentOptions(),
              const SizedBox(height: 16),
              _buildActionButtons(),
            ],
          ],
        ),
      ),
    );
  }

  Widget _buildHeader() {
    return Row(
      children: [
        CircleAvatar(
          radius: 20,
          backgroundColor: Theme.of(context).primaryColor.withValues(alpha: 0.1),
          child: Icon(
            Icons.person,
            color: Theme.of(context).primaryColor,
            size: 20,
          ),
        ),
        const SizedBox(width: 12),
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Share Your Trading Journey',
                style: Theme.of(context).textTheme.titleMedium?.copyWith(
                      fontWeight: FontWeight.bold,
                    ),
              ),
              Text(
                'What\'s on your mind?',
                style: Theme.of(context).textTheme.bodySmall?.copyWith(
                      color: Colors.grey,
                    ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildTextField() {
    return TextField(
      controller: _textController,
      focusNode: _focusNode,
      maxLines: _isExpanded ? 5 : 3,
      onTap: () {
        if (!_isExpanded) {
          setState(() {
            _isExpanded = true;
          });
        }
      },
      decoration: InputDecoration(
        hintText: 'Share your trade, insight, or market thoughts...',
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(8),
          borderSide: BorderSide(color: Colors.grey.withValues(alpha: 0.3)),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(8),
          borderSide: BorderSide(color: Theme.of(context).primaryColor),
        ),
        filled: true,
        fillColor: Colors.grey.withValues(alpha: 0.05),
        contentPadding: const EdgeInsets.all(12),
      ),
    );
  }

  Widget _buildTypeSelector() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Post Type',
          style: Theme.of(context).textTheme.titleSmall?.copyWith(
                fontWeight: FontWeight.bold,
              ),
        ),
        const SizedBox(height: 8),
        Wrap(
          spacing: 8,
          children: PostType.values.map((type) {
            final isSelected = _selectedType == type;
            return FilterChip(
              label: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Icon(
                    _getPostTypeIcon(type),
                    size: 16,
                    color: isSelected 
                        ? Theme.of(context).primaryColor 
                        : Colors.grey,
                  ),
                  const SizedBox(width: 4),
                  Text(_getPostTypeLabel(type)),
                ],
              ),
              selected: isSelected,
              onSelected: (selected) {
                setState(() {
                  _selectedType = type;
                  if (type != PostType.trade) {
                    _tradeData = null;
                  }
                });
              },
              selectedColor: Theme.of(context).primaryColor.withValues(alpha: 0.2),
              checkmarkColor: Theme.of(context).primaryColor,
            );
          }).toList(),
        ),
      ],
    );
  }

  Widget _buildTradeDataInput() {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        border: Border.all(color: Colors.grey.withValues(alpha: 0.3)),
        borderRadius: BorderRadius.circular(8),
        color: Colors.grey.withValues(alpha: 0.05),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Trade Details (Optional)',
            style: Theme.of(context).textTheme.titleSmall?.copyWith(
                  fontWeight: FontWeight.bold,
                ),
          ),
          const SizedBox(height: 12),
          Row(
            children: [
              Expanded(
                child: TextField(
                  decoration: const InputDecoration(
                    labelText: 'Symbol',
                    hintText: 'e.g., EUR/USD',
                    border: OutlineInputBorder(),
                    isDense: true,
                  ),
                  onChanged: (value) {
                    _updateTradeData(symbol: value);
                  },
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: DropdownButtonFormField<String>(
                  decoration: const InputDecoration(
                    labelText: 'Direction',
                    border: OutlineInputBorder(),
                    isDense: true,
                  ),
                  initialValue: 'long',
                  items: const [
                    DropdownMenuItem(value: 'long', child: Text('Long')),
                    DropdownMenuItem(value: 'short', child: Text('Short')),
                  ],
                  onChanged: (value) {
                    _updateTradeData(direction: value ?? 'long');
                  },
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          Row(
            children: [
              Expanded(
                child: TextField(
                  decoration: const InputDecoration(
                    labelText: 'Entry Price',
                    hintText: '0.00',
                    border: OutlineInputBorder(),
                    isDense: true,
                  ),
                  keyboardType: const TextInputType.numberWithOptions(decimal: true),
                  onChanged: (value) {
                    final price = double.tryParse(value);
                    if (price != null) {
                      _updateTradeData(entryPrice: price);
                    }
                  },
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: TextField(
                  decoration: const InputDecoration(
                    labelText: 'P&L',
                    hintText: '0.00',
                    border: OutlineInputBorder(),
                    isDense: true,
                  ),
                  keyboardType: const TextInputType.numberWithOptions(decimal: true, signed: true),
                  onChanged: (value) {
                    final pnl = double.tryParse(value);
                    if (pnl != null) {
                      _updateTradeData(pnl: pnl);
                    }
                  },
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildAttachmentOptions() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Add to Post',
          style: Theme.of(context).textTheme.titleSmall?.copyWith(
                fontWeight: FontWeight.bold,
              ),
        ),
        const SizedBox(height: 8),
        Row(
          children: [
            _buildAttachmentButton(
              icon: Icons.image,
              label: 'Chart',
              onTap: _addImage,
            ),
            const SizedBox(width: 12),
            _buildAttachmentButton(
              icon: Icons.trending_up,
              label: 'Analysis',
              onTap: _addAnalysis,
            ),
            const SizedBox(width: 12),
            _buildAttachmentButton(
              icon: Icons.tag,
              label: 'Tags',
              onTap: _addTags,
            ),
          ],
        ),
        if (_attachedImages.isNotEmpty) ...[
          const SizedBox(height: 12),
          _buildAttachedImages(),
        ],
      ],
    );
  }

  Widget _buildAttachmentButton({
    required IconData icon,
    required String label,
    required VoidCallback onTap,
  }) {
    return InkWell(
      onTap: onTap,
      borderRadius: BorderRadius.circular(20),
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
        decoration: BoxDecoration(
          border: Border.all(color: Colors.grey.withValues(alpha: 0.3)),
          borderRadius: BorderRadius.circular(20),
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(icon, size: 16, color: Colors.grey),
            const SizedBox(width: 4),
            Text(
              label,
              style: Theme.of(context).textTheme.bodySmall?.copyWith(
                    color: Colors.grey,
                  ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildAttachedImages() {
    return SizedBox(
      height: 60,
      child: ListView.builder(
        scrollDirection: Axis.horizontal,
        itemCount: _attachedImages.length,
        itemBuilder: (context, index) {
          return Container(
            margin: const EdgeInsets.only(right: 8),
            width: 60,
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(8),
              color: Colors.grey.withValues(alpha: 0.3),
            ),
            child: Stack(
              children: [
                Center(
                  child: Icon(
                    Icons.image,
                    color: Colors.grey[600],
                  ),
                ),
                Positioned(
                  top: 4,
                  right: 4,
                  child: InkWell(
                    onTap: () {
                      setState(() {
                        _attachedImages.removeAt(index);
                      });
                    },
                    child: Container(
                      padding: const EdgeInsets.all(2),
                      decoration: BoxDecoration(
                        color: Colors.red,
                        borderRadius: BorderRadius.circular(10),
                      ),
                      child: const Icon(
                        Icons.close,
                        color: Colors.white,
                        size: 12,
                      ),
                    ),
                  ),
                ),
              ],
            ),
          );
        },
      ),
    );
  }

  Widget _buildActionButtons() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.end,
      children: [
        TextButton(
          onPressed: _isPosting ? null : _cancelPost,
          child: const Text('Cancel'),
        ),
        const SizedBox(width: 12),
        ElevatedButton(
          onPressed: _isPosting || _textController.text.trim().isEmpty 
              ? null 
              : _createPost,
          style: ElevatedButton.styleFrom(
            backgroundColor: Theme.of(context).primaryColor,
            foregroundColor: Colors.white,
            padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
          ),
          child: _isPosting
              ? const SizedBox(
                  height: 16,
                  width: 16,
                  child: CircularProgressIndicator(
                    strokeWidth: 2,
                    valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                  ),
                )
              : const Text('Post'),
        ),
      ],
    );
  }

  void _updateTradeData({
    String? symbol,
    String? direction,
    double? entryPrice,
    double? pnl,
  }) {
    setState(() {
      _tradeData = (_tradeData ?? TradeData(
        symbol: '',
        direction: 'long',
        entryPrice: 0.0,
        pnl: 0.0,
        timeframe: '1D',
        entryTime: DateTime.now(),
      )).copyWith(
        symbol: symbol,
        direction: direction,
        entryPrice: entryPrice,
        pnl: pnl,
      );
    });
  }

  void _addImage() {
    // TODO: Implement image picker
    setState(() {
      _attachedImages.add('image_${DateTime.now().millisecondsSinceEpoch}');
    });
    
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Image picker coming soon!'),
        backgroundColor: Colors.blue,
      ),
    );
  }

  void _addAnalysis() {
    // TODO: Implement analysis tools
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Analysis tools coming soon!'),
        backgroundColor: Colors.blue,
      ),
    );
  }

  void _addTags() {
    // TODO: Implement tag selector
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Tag selector coming soon!'),
        backgroundColor: Colors.blue,
      ),
    );
  }

  void _cancelPost() {
    setState(() {
      _textController.clear();
      _isExpanded = false;
      _selectedType = PostType.general;
      _attachedImages.clear();
      _tradeData = null;
    });
    _focusNode.unfocus();
  }

  void _createPost() async {
    if (_textController.text.trim().isEmpty) return;

    setState(() {
      _isPosting = true;
    });

    try {
      final post = Post(
        id: const Uuid().v4(),
        authorId: 'current_user',
        authorName: 'You',
        type: _selectedType,
        content: _textController.text.trim(),
        images: _attachedImages,
        tradeData: _tradeData,
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );

      // Simulate posting delay
      await Future.delayed(const Duration(milliseconds: 500));

      widget.onPostCreated(post);

      // Reset form
      _cancelPost();

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Post shared successfully!'),
            backgroundColor: Colors.green,
          ),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error creating post: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isPosting = false;
        });
      }
    }
  }

  IconData _getPostTypeIcon(PostType type) {
    switch (type) {
      case PostType.trade:
        return Icons.trending_up;
      case PostType.insight:
        return Icons.lightbulb_outline;
      case PostType.general:
        return Icons.chat_bubble_outline;
    }
  }

  String _getPostTypeLabel(PostType type) {
    switch (type) {
      case PostType.trade:
        return 'Trade';
      case PostType.insight:
        return 'Insight';
      case PostType.general:
        return 'General';
    }
  }
}