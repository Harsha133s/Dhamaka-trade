// Auto-generated by TradeVerseAI Agent
// Purpose: TradeCard widget for displaying shared trade details, P&L, likes, and comments

import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import '../models/post_model.dart';

class TradeCard extends StatelessWidget {
  final Post post;
  final VoidCallback? onLike;
  final VoidCallback? onComment;
  final VoidCallback? onShare;
  final VoidCallback? onSave;

  const TradeCard({
    super.key,
    required this.post,
    this.onLike,
    this.onComment,
    this.onShare,
    this.onSave,
  });

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: EdgeInsets.zero,
      elevation: 1,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _buildHeader(context),
            const SizedBox(height: 12),
            _buildContent(context),
            if (post.tradeData != null) ...[
              const SizedBox(height: 12),
              _buildTradeData(context, post.tradeData!),
            ],
            if (post.images.isNotEmpty) ...[
              const SizedBox(height: 12),
              _buildImages(context),
            ],
            const SizedBox(height: 12),
            _buildActions(context),
          ],
        ),
      ),
    );
  }

  Widget _buildHeader(BuildContext context) {
    return Row(
      children: [
        // Author avatar
        CircleAvatar(
          radius: 20,
          backgroundColor: _getTypeColor(post.type).withValues(alpha: 0.1),
          child: post.authorAvatar != null
              ? ClipCircle(child: Image.network(post.authorAvatar!))
              : Icon(
                  Icons.person,
                  color: _getTypeColor(post.type),
                  size: 20,
                ),
        ),
        
        const SizedBox(width: 12),
        
        // Author info and timestamp
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  Text(
                    post.authorName,
                    style: Theme.of(context).textTheme.titleMedium?.copyWith(
                          fontWeight: FontWeight.bold,
                        ),
                  ),
                  const SizedBox(width: 8),
                  _buildTypeChip(context),
                ],
              ),
              Text(
                _getTimeAgo(post.createdAt),
                style: Theme.of(context).textTheme.bodySmall?.copyWith(
                      color: Colors.grey,
                    ),
              ),
            ],
          ),
        ),
        
        // More options
        PopupMenuButton<String>(
          icon: const Icon(Icons.more_horiz, color: Colors.grey),
          onSelected: (value) {
            switch (value) {
              case 'save':
                onSave?.call();
                break;
              case 'report':
                _reportPost(context);
                break;
              case 'hide':
                _hidePost(context);
                break;
            }
          },
          itemBuilder: (context) => [
            PopupMenuItem(
              value: 'save',
              child: ListTile(
                leading: Icon(post.isSaved ? Icons.bookmark : Icons.bookmark_border),
                title: Text(post.isSaved ? 'Unsave' : 'Save Post'),
                dense: true,
              ),
            ),
            const PopupMenuItem(
              value: 'report',
              child: ListTile(
                leading: Icon(Icons.flag_outlined),
                title: Text('Report Post'),
                dense: true,
              ),
            ),
            const PopupMenuItem(
              value: 'hide',
              child: ListTile(
                leading: Icon(Icons.visibility_off_outlined),
                title: Text('Hide Post'),
                dense: true,
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildTypeChip(BuildContext context) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
      decoration: BoxDecoration(
        color: _getTypeColor(post.type).withValues(alpha: 0.1),
        borderRadius: BorderRadius.circular(10),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(
            _getTypeIcon(post.type),
            size: 12,
            color: _getTypeColor(post.type),
          ),
          const SizedBox(width: 2),
          Text(
            _getTypeLabel(post.type),
            style: TextStyle(
              fontSize: 10,
              fontWeight: FontWeight.w600,
              color: _getTypeColor(post.type),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildContent(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          post.content,
          style: Theme.of(context).textTheme.bodyMedium,
        ),
        if (post.tags.isNotEmpty) ...[
          const SizedBox(height: 8),
          Wrap(
            spacing: 4,
            runSpacing: 4,
            children: post.tags.map((tag) {
              return Container(
                padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                decoration: BoxDecoration(
                  color: Colors.grey.withValues(alpha: 0.1),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Text(
                  '#$tag',
                  style: Theme.of(context).textTheme.bodySmall?.copyWith(
                        color: Theme.of(context).primaryColor,
                        fontWeight: FontWeight.w500,
                      ),
                ),
              );
            }).toList(),
          ),
        ],
      ],
    );
  }

  Widget _buildTradeData(BuildContext context, TradeData tradeData) {
    final pnlColor = tradeData.isProfitable ? Colors.green : Colors.red;
    
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        border: Border.all(color: pnlColor.withValues(alpha: 0.3)),
        borderRadius: BorderRadius.circular(8),
        color: pnlColor.withValues(alpha: 0.05),
      ),
      child: Column(
        children: [
          // Symbol and direction
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Row(
                children: [
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                    decoration: BoxDecoration(
                      color: tradeData.direction == 'long' 
                          ? Colors.green.withValues(alpha: 0.1)
                          : Colors.red.withValues(alpha: 0.1),
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: Text(
                      tradeData.direction.toUpperCase(),
                      style: TextStyle(
                        fontSize: 10,
                        fontWeight: FontWeight.bold,
                        color: tradeData.direction == 'long' ? Colors.green : Colors.red,
                      ),
                    ),
                  ),
                  const SizedBox(width: 8),
                  Text(
                    tradeData.symbol,
                    style: Theme.of(context).textTheme.titleMedium?.copyWith(
                          fontWeight: FontWeight.bold,
                        ),
                  ),
                ],
              ),
              Text(
                tradeData.formattedPnl,
                style: Theme.of(context).textTheme.titleLarge?.copyWith(
                      color: pnlColor,
                      fontWeight: FontWeight.bold,
                    ),
              ),
            ],
          ),
          
          const SizedBox(height: 8),
          
          // Trade details
          Row(
            children: [
              Expanded(
                child: _buildTradeDetailItem(
                  context,
                  'Entry',
                  '\$${tradeData.entryPrice.toStringAsFixed(5)}',
                  Icons.login,
                ),
              ),
              Expanded(
                child: _buildTradeDetailItem(
                  context,
                  'Exit',
                  tradeData.exitPrice != null 
                      ? '\$${tradeData.exitPrice!.toStringAsFixed(5)}'
                      : 'Open',
                  tradeData.isOpen ? Icons.trending_up : Icons.logout,
                ),
              ),
              Expanded(
                child: _buildTradeDetailItem(
                  context,
                  'Timeframe',
                  tradeData.timeframe,
                  Icons.schedule,
                ),
              ),
            ],
          ),
          
          if (tradeData.strategy != null) ...[
            const SizedBox(height: 8),
            Row(
              children: [
                Icon(
                  Icons.psychology,
                  size: 16,
                  color: Colors.grey,
                ),
                const SizedBox(width: 4),
                Text(
                  'Strategy: ${tradeData.strategy}',
                  style: Theme.of(context).textTheme.bodySmall?.copyWith(
                        color: Colors.grey[600],
                        fontStyle: FontStyle.italic,
                      ),
                ),
              ],
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildTradeDetailItem(
    BuildContext context,
    String label,
    String value,
    IconData icon,
  ) {
    return Column(
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              icon,
              size: 14,
              color: Colors.grey,
            ),
            const SizedBox(width: 4),
            Text(
              label,
              style: Theme.of(context).textTheme.bodySmall?.copyWith(
                    color: Colors.grey,
                    fontSize: 10,
                  ),
            ),
          ],
        ),
        const SizedBox(height: 2),
        Text(
          value,
          style: Theme.of(context).textTheme.bodySmall?.copyWith(
                fontWeight: FontWeight.w600,
              ),
        ),
      ],
    );
  }

  Widget _buildImages(BuildContext context) {
    return Container(
      height: 200,
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(8),
        color: Colors.grey.withValues(alpha: 0.1),
      ),
      child: post.images.length == 1
          ? _buildSingleImage(post.images.first)
          : _buildImageGrid(),
    );
  }

  Widget _buildSingleImage(String imageUrl) {
    return Container(
      width: double.infinity,
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(8),
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            Colors.blue.withValues(alpha: 0.1),
            Colors.purple.withValues(alpha: 0.1),
          ],
        ),
      ),
      child: const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.show_chart,
              size: 48,
              color: Colors.grey,
            ),
            SizedBox(height: 8),
            Text(
              'Chart Image',
              style: TextStyle(
                color: Colors.grey,
                fontWeight: FontWeight.w500,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildImageGrid() {
    return GridView.builder(
      physics: const NeverScrollableScrollPhysics(),
      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: 2,
        crossAxisSpacing: 4,
        mainAxisSpacing: 4,
      ),
      itemCount: post.images.length,
      itemBuilder: (context, index) => _buildSingleImage(post.images[index]),
    );
  }

  Widget _buildActions(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Row(
          children: [
            // Like button
            _buildActionButton(
              icon: post.isLiked ? Icons.favorite : Icons.favorite_border,
              label: _formatCount(post.likesCount),
              color: post.isLiked ? Colors.red : Colors.grey,
              onTap: onLike,
            ),
            
            const SizedBox(width: 24),
            
            // Comment button
            _buildActionButton(
              icon: Icons.chat_bubble_outline,
              label: _formatCount(post.commentsCount),
              color: Colors.grey,
              onTap: onComment,
            ),
            
            const SizedBox(width: 24),
            
            // Share button
            _buildActionButton(
              icon: Icons.share_outlined,
              label: _formatCount(post.sharesCount),
              color: Colors.grey,
              onTap: onShare,
            ),
          ],
        ),
        
        // Save button
        IconButton(
          onPressed: onSave,
          icon: Icon(
            post.isSaved ? Icons.bookmark : Icons.bookmark_border,
            color: post.isSaved ? Theme.of(context).primaryColor : Colors.grey,
          ),
          tooltip: post.isSaved ? 'Unsave' : 'Save',
        ),
      ],
    );
  }

  Widget _buildActionButton({
    required IconData icon,
    required String label,
    required Color color,
    VoidCallback? onTap,
  }) {
    return InkWell(
      onTap: onTap,
      borderRadius: BorderRadius.circular(20),
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(icon, size: 20, color: color),
            const SizedBox(width: 4),
            Text(
              label,
              style: TextStyle(
                color: color,
                fontWeight: FontWeight.w500,
              ),
            ),
          ],
        ),
      ),
    );
  }

  // Helper methods
  Color _getTypeColor(PostType type) {
    switch (type) {
      case PostType.trade:
        return Colors.green;
      case PostType.insight:
        return Colors.blue;
      case PostType.general:
        return Colors.purple;
    }
  }

  IconData _getTypeIcon(PostType type) {
    switch (type) {
      case PostType.trade:
        return Icons.trending_up;
      case PostType.insight:
        return Icons.lightbulb;
      case PostType.general:
        return Icons.chat_bubble;
    }
  }

  String _getTypeLabel(PostType type) {
    switch (type) {
      case PostType.trade:
        return 'TRADE';
      case PostType.insight:
        return 'INSIGHT';
      case PostType.general:
        return 'POST';
    }
  }

  String _getTimeAgo(DateTime dateTime) {
    final now = DateTime.now();
    final difference = now.difference(dateTime);

    if (difference.inSeconds < 60) {
      return 'just now';
    } else if (difference.inMinutes < 60) {
      return '${difference.inMinutes}m ago';
    } else if (difference.inHours < 24) {
      return '${difference.inHours}h ago';
    } else if (difference.inDays < 7) {
      return '${difference.inDays}d ago';
    } else {
      return DateFormat('MMM dd').format(dateTime);
    }
  }

  String _formatCount(int count) {
    if (count < 1000) {
      return count.toString();
    } else if (count < 1000000) {
      return '${(count / 1000).toStringAsFixed(1)}K';
    } else {
      return '${(count / 1000000).toStringAsFixed(1)}M';
    }
  }

  void _reportPost(BuildContext context) {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Report functionality coming soon'),
        backgroundColor: Colors.orange,
      ),
    );
  }

  void _hidePost(BuildContext context) {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Post hidden'),
        backgroundColor: Colors.blue,
      ),
    );
  }
}

class ClipCircle extends StatelessWidget {
  final Widget child;

  const ClipCircle({super.key, required this.child});

  @override
  Widget build(BuildContext context) {
    return ClipOval(child: child);
  }
}