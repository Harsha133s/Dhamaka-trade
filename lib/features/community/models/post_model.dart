// Auto-generated by TradeVerseAI Agent
// Purpose: Post model for community feed functionality

import 'package:flutter/foundation.dart';

enum PostType { trade, insight, general }

@immutable
class Post {
  final String id;
  final String authorId;
  final String authorName;
  final String? authorAvatar;
  final PostType type;
  final String content;
  final List<String> images;
  final TradeData? tradeData;
  final int likesCount;
  final int commentsCount;
  final int sharesCount;
  final bool isLiked;
  final bool isSaved;
  final DateTime createdAt;
  final DateTime updatedAt;
  final List<String> tags;
  final Map<String, dynamic> metadata;

  const Post({
    required this.id,
    required this.authorId,
    required this.authorName,
    this.authorAvatar,
    required this.type,
    required this.content,
    this.images = const [],
    this.tradeData,
    this.likesCount = 0,
    this.commentsCount = 0,
    this.sharesCount = 0,
    this.isLiked = false,
    this.isSaved = false,
    required this.createdAt,
    required this.updatedAt,
    this.tags = const [],
    this.metadata = const {},
  });

  // Copy with method for updates
  Post copyWith({
    String? id,
    String? authorId,
    String? authorName,
    String? authorAvatar,
    PostType? type,
    String? content,
    List<String>? images,
    TradeData? tradeData,
    int? likesCount,
    int? commentsCount,
    int? sharesCount,
    bool? isLiked,
    bool? isSaved,
    DateTime? createdAt,
    DateTime? updatedAt,
    List<String>? tags,
    Map<String, dynamic>? metadata,
  }) {
    return Post(
      id: id ?? this.id,
      authorId: authorId ?? this.authorId,
      authorName: authorName ?? this.authorName,
      authorAvatar: authorAvatar ?? this.authorAvatar,
      type: type ?? this.type,
      content: content ?? this.content,
      images: images ?? this.images,
      tradeData: tradeData ?? this.tradeData,
      likesCount: likesCount ?? this.likesCount,
      commentsCount: commentsCount ?? this.commentsCount,
      sharesCount: sharesCount ?? this.sharesCount,
      isLiked: isLiked ?? this.isLiked,
      isSaved: isSaved ?? this.isSaved,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      tags: tags ?? this.tags,
      metadata: metadata ?? this.metadata,
    );
  }

  // JSON serialization
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'author_id': authorId,
      'author_name': authorName,
      'author_avatar': authorAvatar,
      'type': type.toString().split('.').last,
      'content': content,
      'images': images,
      'trade_data': tradeData?.toJson(),
      'likes_count': likesCount,
      'comments_count': commentsCount,
      'shares_count': sharesCount,
      'is_liked': isLiked,
      'is_saved': isSaved,
      'created_at': createdAt.toIso8601String(),
      'updated_at': updatedAt.toIso8601String(),
      'tags': tags,
      'metadata': metadata,
    };
  }

  // JSON deserialization
  factory Post.fromJson(Map<String, dynamic> json) {
    return Post(
      id: json['id'] as String,
      authorId: json['author_id'] as String,
      authorName: json['author_name'] as String,
      authorAvatar: json['author_avatar'] as String?,
      type: PostType.values.firstWhere(
        (e) => e.toString().split('.').last == json['type'],
        orElse: () => PostType.general,
      ),
      content: json['content'] as String,
      images: (json['images'] as List<dynamic>?)
          ?.map((e) => e as String)
          .toList() ?? [],
      tradeData: json['trade_data'] != null
          ? TradeData.fromJson(json['trade_data'] as Map<String, dynamic>)
          : null,
      likesCount: json['likes_count'] as int? ?? 0,
      commentsCount: json['comments_count'] as int? ?? 0,
      sharesCount: json['shares_count'] as int? ?? 0,
      isLiked: json['is_liked'] as bool? ?? false,
      isSaved: json['is_saved'] as bool? ?? false,
      createdAt: DateTime.parse(json['created_at'] as String),
      updatedAt: DateTime.parse(json['updated_at'] as String),
      tags: (json['tags'] as List<dynamic>?)
          ?.map((e) => e as String)
          .toList() ?? [],
      metadata: json['metadata'] as Map<String, dynamic>? ?? {},
    );
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is Post && other.id == id;
  }

  @override
  int get hashCode => id.hashCode;

  @override
  String toString() {
    return 'Post(id: $id, authorName: $authorName, type: $type)';
  }
}

@immutable
class TradeData {
  final String symbol;
  final String direction; // 'long' or 'short'
  final double entryPrice;
  final double? exitPrice;
  final double pnl;
  final String timeframe;
  final DateTime entryTime;
  final DateTime? exitTime;
  final String? strategy;
  final double? stopLoss;
  final double? takeProfit;

  const TradeData({
    required this.symbol,
    required this.direction,
    required this.entryPrice,
    this.exitPrice,
    required this.pnl,
    required this.timeframe,
    required this.entryTime,
    this.exitTime,
    this.strategy,
    this.stopLoss,
    this.takeProfit,
  });

  // Computed properties
  bool get isProfitable => pnl > 0;
  bool get isOpen => exitPrice == null;
  String get formattedPnl {
    final sign = pnl >= 0 ? '+' : '';
    return '$sign\$${pnl.toStringAsFixed(2)}';
  }

  // Copy with method
  TradeData copyWith({
    String? symbol,
    String? direction,
    double? entryPrice,
    double? exitPrice,
    double? pnl,
    String? timeframe,
    DateTime? entryTime,
    DateTime? exitTime,
    String? strategy,
    double? stopLoss,
    double? takeProfit,
  }) {
    return TradeData(
      symbol: symbol ?? this.symbol,
      direction: direction ?? this.direction,
      entryPrice: entryPrice ?? this.entryPrice,
      exitPrice: exitPrice ?? this.exitPrice,
      pnl: pnl ?? this.pnl,
      timeframe: timeframe ?? this.timeframe,
      entryTime: entryTime ?? this.entryTime,
      exitTime: exitTime ?? this.exitTime,
      strategy: strategy ?? this.strategy,
      stopLoss: stopLoss ?? this.stopLoss,
      takeProfit: takeProfit ?? this.takeProfit,
    );
  }

  // JSON serialization
  Map<String, dynamic> toJson() {
    return {
      'symbol': symbol,
      'direction': direction,
      'entry_price': entryPrice,
      'exit_price': exitPrice,
      'pnl': pnl,
      'timeframe': timeframe,
      'entry_time': entryTime.toIso8601String(),
      'exit_time': exitTime?.toIso8601String(),
      'strategy': strategy,
      'stop_loss': stopLoss,
      'take_profit': takeProfit,
    };
  }

  // JSON deserialization
  factory TradeData.fromJson(Map<String, dynamic> json) {
    return TradeData(
      symbol: json['symbol'] as String,
      direction: json['direction'] as String,
      entryPrice: (json['entry_price'] as num).toDouble(),
      exitPrice: json['exit_price'] != null
          ? (json['exit_price'] as num).toDouble()
          : null,
      pnl: (json['pnl'] as num).toDouble(),
      timeframe: json['timeframe'] as String,
      entryTime: DateTime.parse(json['entry_time'] as String),
      exitTime: json['exit_time'] != null
          ? DateTime.parse(json['exit_time'] as String)
          : null,
      strategy: json['strategy'] as String?,
      stopLoss: json['stop_loss'] != null
          ? (json['stop_loss'] as num).toDouble()
          : null,
      takeProfit: json['take_profit'] != null
          ? (json['take_profit'] as num).toDouble()
          : null,
    );
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is TradeData &&
        other.symbol == symbol &&
        other.entryTime == entryTime;
  }

  @override
  int get hashCode => symbol.hashCode ^ entryTime.hashCode;

  @override
  String toString() {
    return 'TradeData(symbol: $symbol, direction: $direction, pnl: $pnl)';
  }
}

@immutable
class Comment {
  final String id;
  final String postId;
  final String authorId;
  final String authorName;
  final String? authorAvatar;
  final String content;
  final int likesCount;
  final bool isLiked;
  final DateTime createdAt;
  final String? parentId; // For threaded comments
  final List<Comment> replies;

  const Comment({
    required this.id,
    required this.postId,
    required this.authorId,
    required this.authorName,
    this.authorAvatar,
    required this.content,
    this.likesCount = 0,
    this.isLiked = false,
    required this.createdAt,
    this.parentId,
    this.replies = const [],
  });

  // Copy with method
  Comment copyWith({
    String? id,
    String? postId,
    String? authorId,
    String? authorName,
    String? authorAvatar,
    String? content,
    int? likesCount,
    bool? isLiked,
    DateTime? createdAt,
    String? parentId,
    List<Comment>? replies,
  }) {
    return Comment(
      id: id ?? this.id,
      postId: postId ?? this.postId,
      authorId: authorId ?? this.authorId,
      authorName: authorName ?? this.authorName,
      authorAvatar: authorAvatar ?? this.authorAvatar,
      content: content ?? this.content,
      likesCount: likesCount ?? this.likesCount,
      isLiked: isLiked ?? this.isLiked,
      createdAt: createdAt ?? this.createdAt,
      parentId: parentId ?? this.parentId,
      replies: replies ?? this.replies,
    );
  }

  // JSON serialization
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'post_id': postId,
      'author_id': authorId,
      'author_name': authorName,
      'author_avatar': authorAvatar,
      'content': content,
      'likes_count': likesCount,
      'is_liked': isLiked,
      'created_at': createdAt.toIso8601String(),
      'parent_id': parentId,
      'replies': replies.map((r) => r.toJson()).toList(),
    };
  }

  // JSON deserialization
  factory Comment.fromJson(Map<String, dynamic> json) {
    return Comment(
      id: json['id'] as String,
      postId: json['post_id'] as String,
      authorId: json['author_id'] as String,
      authorName: json['author_name'] as String,
      authorAvatar: json['author_avatar'] as String?,
      content: json['content'] as String,
      likesCount: json['likes_count'] as int? ?? 0,
      isLiked: json['is_liked'] as bool? ?? false,
      createdAt: DateTime.parse(json['created_at'] as String),
      parentId: json['parent_id'] as String?,
      replies: (json['replies'] as List<dynamic>?)
          ?.map((r) => Comment.fromJson(r as Map<String, dynamic>))
          .toList() ?? [],
    );
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is Comment && other.id == id;
  }

  @override
  int get hashCode => id.hashCode;

  @override
  String toString() {
    return 'Comment(id: $id, authorName: $authorName)';
  }
}