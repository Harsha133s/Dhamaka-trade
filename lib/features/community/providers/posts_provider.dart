// Auto-generated by TradeVerseAI Agent
// Purpose: Posts provider for managing community feed data with Riverpod and Supabase

import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import '../models/post_model.dart';

// Supabase client provider
final supabaseProvider = Provider<SupabaseClient>((ref) {
  return Supabase.instance.client;
});

// Posts repository provider
final postsRepositoryProvider = Provider<PostsRepository>((ref) {
  final supabase = ref.watch(supabaseProvider);
  return PostsRepository(supabase);
});

// Main posts provider
final postsProvider = AsyncNotifierProvider<PostsNotifier, List<Post>>(() {
  return PostsNotifier();
});

// Posts notifier class
class PostsNotifier extends AsyncNotifier<List<Post>> {
  int _currentPage = 0;
  static const int _postsPerPage = 10;

  @override
  Future<List<Post>> build() async {
    final repository = ref.read(postsRepositoryProvider);
    return await repository.getPosts(page: 0, limit: _postsPerPage);
  }

  // Add a new post
  Future<void> addPost(Post post) async {
    final repository = ref.read(postsRepositoryProvider);
    
    // Optimistic update
    final currentPosts = state.valueOrNull ?? [];
    state = AsyncData([post, ...currentPosts]);
    
    try {
      await repository.insertPost(post);
      // Refresh to get the latest data
      ref.invalidateSelf();
    } catch (e) {
      // Rollback optimistic update
      state = AsyncData(currentPosts);
      rethrow;
    }
  }

  // Toggle like on a post
  Future<void> toggleLike(String postId) async {
    final repository = ref.read(postsRepositoryProvider);
    
    // Optimistic update
    final currentPosts = state.valueOrNull ?? [];
    final updatedPosts = currentPosts.map((post) {
      if (post.id == postId) {
        return post.copyWith(
          isLiked: !post.isLiked,
          likesCount: post.isLiked 
              ? post.likesCount - 1 
              : post.likesCount + 1,
        );
      }
      return post;
    }).toList();
    state = AsyncData(updatedPosts);
    
    try {
      await repository.toggleLike(postId);
    } catch (e) {
      // Rollback optimistic update
      state = AsyncData(currentPosts);
      rethrow;
    }
  }

  // Toggle save on a post
  Future<void> toggleSave(String postId) async {
    final repository = ref.read(postsRepositoryProvider);
    
    // Optimistic update
    final currentPosts = state.valueOrNull ?? [];
    final updatedPosts = currentPosts.map((post) {
      if (post.id == postId) {
        return post.copyWith(isSaved: !post.isSaved);
      }
      return post;
    }).toList();
    state = AsyncData(updatedPosts);
    
    try {
      await repository.toggleSave(postId);
    } catch (e) {
      // Rollback optimistic update
      state = AsyncData(currentPosts);
      rethrow;
    }
  }

  // Load more posts (pagination)
  Future<void> loadMorePosts() async {
    final repository = ref.read(postsRepositoryProvider);
    final currentPosts = state.valueOrNull ?? [];
    
    try {
      _currentPage++;
      final newPosts = await repository.getPosts(
        page: _currentPage, 
        limit: _postsPerPage,
      );
      
      if (newPosts.isNotEmpty) {
        state = AsyncData([...currentPosts, ...newPosts]);
      }
    } catch (e) {
      _currentPage--;
      rethrow;
    }
  }

  // Filter posts by type
  Future<void> filterPosts(String filter) async {
    _currentPage = 0;
    
    final repository = ref.read(postsRepositoryProvider);
    
    try {
      final posts = await repository.getPosts(
        page: 0,
        limit: _postsPerPage,
        filter: filter,
      );
      state = AsyncData(posts);
    } catch (e) {
      rethrow;
    }
  }

  // Refresh posts
  Future<void> refresh() async {
    _currentPage = 0;
    ref.invalidateSelf();
  }
}

// Repository class for Supabase operations
class PostsRepository {
  final SupabaseClient _supabase;
  static const String _tableName = 'posts';

  PostsRepository(this._supabase);

  // Get posts with pagination and filtering
  Future<List<Post>> getPosts({
    int page = 0,
    int limit = 10,
    String? filter,
  }) async {
    try {
      var query = _supabase
          .from(_tableName)
          .select()
          .order('created_at', ascending: false)
          .range(page * limit, (page + 1) * limit - 1);

      if (filter != null && filter != 'All') {
        // Note: Supabase filter would be implemented here
        // query = query.eq('type', filter.toLowerCase());
      }

      final response = await query;
      return (response as List)
          .map((json) => Post.fromJson(json as Map<String, dynamic>))
          .toList();
    } catch (e) {
      // If table doesn't exist or no posts, return mock data for development
      return _getMockPosts(page: page, limit: limit, filter: filter);
    }
  }

  // Insert a new post
  Future<void> insertPost(Post post) async {
    await _supabase.from(_tableName).insert(post.toJson());
  }

  // Toggle like on a post
  Future<void> toggleLike(String postId) async {
    // TODO: Implement real-time like toggle with proper user tracking
    // For now, this is a placeholder
    await Future.delayed(const Duration(milliseconds: 200));
  }

  // Toggle save on a post
  Future<void> toggleSave(String postId) async {
    // TODO: Implement save/unsave functionality
    await Future.delayed(const Duration(milliseconds: 200));
  }

  // Mock data for development/demo purposes
  List<Post> _getMockPosts({int page = 0, int limit = 10, String? filter}) {
    final now = DateTime.now();
    final allPosts = [
      Post(
        id: '1',
        authorId: 'user1',
        authorName: 'Alex Chen',
        authorAvatar: null,
        type: PostType.trade,
        content: 'Just closed a profitable EUR/USD trade! üìà Entry at 1.0850, exit at 1.0920. The breakout strategy worked perfectly. Always trust your setups and manage risk!',
        images: [],
        tradeData: TradeData(
          symbol: 'EUR/USD',
          direction: 'long',
          entryPrice: 1.0850,
          exitPrice: 1.0920,
          pnl: 1400.00,
          timeframe: '4H',
          entryTime: now.subtract(const Duration(hours: 8)),
          exitTime: now.subtract(const Duration(hours: 2)),
          strategy: 'Breakout Strategy',
        ),
        likesCount: 24,
        commentsCount: 8,
        sharesCount: 3,
        isLiked: false,
        isSaved: false,
        createdAt: now.subtract(const Duration(hours: 2)),
        updatedAt: now.subtract(const Duration(hours: 2)),
        tags: ['EUR/USD', 'breakout', 'forex'],
      ),
      
      Post(
        id: '2',
        authorId: 'user2',
        authorName: 'Sarah Johnson',
        authorAvatar: null,
        type: PostType.insight,
        content: 'üß† Market Psychology Tip: When everyone is fearful, that\'s often the best time to look for opportunities. Remember Warren Buffett\'s famous quote: "Be fearful when others are greedy, be greedy when others are fearful." \n\nCurrently seeing a lot of panic selling in tech stocks. Could be a good contrarian play.',
        images: [],
        likesCount: 56,
        commentsCount: 19,
        sharesCount: 12,
        isLiked: true,
        isSaved: true,
        createdAt: now.subtract(const Duration(hours: 5)),
        updatedAt: now.subtract(const Duration(hours: 5)),
        tags: ['psychology', 'contrarian', 'wisdom'],
      ),
      
      Post(
        id: '3',
        authorId: 'user3',
        authorName: 'Mike Rodriguez',
        authorAvatar: null,
        type: PostType.trade,
        content: 'Tough day on \$TSLA. Took a loss but stuck to my risk management rules. Cut it at -2% as planned. Sometimes the best trade is the one you don\'t stay in. üõ°Ô∏è',
        images: [],
        tradeData: TradeData(
          symbol: 'TSLA',
          direction: 'long',
          entryPrice: 800.00,
          exitPrice: 784.00,
          pnl: -800.00,
          timeframe: '1D',
          entryTime: now.subtract(const Duration(days: 1)),
          exitTime: now.subtract(const Duration(hours: 4)),
        ),
        likesCount: 18,
        commentsCount: 7,
        sharesCount: 2,
        isLiked: false,
        isSaved: false,
        createdAt: now.subtract(const Duration(hours: 4)),
        updatedAt: now.subtract(const Duration(hours: 4)),
        tags: ['TSLA', 'risk-management', 'loss'],
      ),
      
      Post(
        id: '4',
        authorId: 'user4',
        authorName: 'Emma Davis',
        authorAvatar: null,
        type: PostType.insight,
        content: 'üìä Weekly Market Analysis:\n\n‚Ä¢ S&P 500: Testing resistance at 4200\n‚Ä¢ DXY: Strong bullish momentum continues\n‚Ä¢ Gold: Consolidating around 1950 support\n‚Ä¢ Oil: Watch for OPEC+ decision impact\n\nKey events this week: Fed minutes, inflation data, earnings from major tech companies. Stay nimble!',
        images: [],
        likesCount: 89,
        commentsCount: 31,
        sharesCount: 24,
        isLiked: false,
        isSaved: true,
        createdAt: now.subtract(const Duration(hours: 12)),
        updatedAt: now.subtract(const Duration(hours: 12)),
        tags: ['analysis', 'SPX', 'DXY', 'gold', 'oil'],
      ),
      
      Post(
        id: '5',
        authorId: 'user5',
        authorName: 'David Kim',
        authorAvatar: null,
        type: PostType.trade,
        content: 'üöÄ Bitcoin breaking out! Caught this move from \$42,500. Target is \$45,000 based on the measured move. Stop loss tight at break-even now. Let\'s ride this wave!',
        images: [],
        tradeData: TradeData(
          symbol: 'BTCUSD',
          direction: 'long',
          entryPrice: 42500.00,
          pnl: 1200.00, // Unrealized
          timeframe: '4H',
          entryTime: now.subtract(const Duration(hours: 6)),
          strategy: 'Breakout',
          stopLoss: 42500.00,
          takeProfit: 45000.00,
        ),
        likesCount: 67,
        commentsCount: 22,
        sharesCount: 15,
        isLiked: true,
        isSaved: false,
        createdAt: now.subtract(const Duration(hours: 6)),
        updatedAt: now.subtract(const Duration(hours: 6)),
        tags: ['BTC', 'crypto', 'breakout'],
      ),
      
      Post(
        id: '6',
        authorId: 'user6',
        authorName: 'Lisa Wang',
        authorAvatar: null,
        type: PostType.general,
        content: 'üí° Trading Tip Tuesday: Keep a trading journal! üìù\n\nI\'ve been tracking my trades for 6 months now and the insights are incredible:\n\n‚úÖ My best setups happen during London/NY overlap\n‚úÖ I perform better with smaller position sizes\n‚úÖ Friday trades have lower success rate\n\nData doesn\'t lie. Track everything!',
        images: [],
        likesCount: 145,
        commentsCount: 42,
        sharesCount: 38,
        isLiked: false,
        isSaved: false,
        createdAt: now.subtract(const Duration(hours: 18)),
        updatedAt: now.subtract(const Duration(hours: 18)),
        tags: ['education', 'journal', 'tips'],
      ),
    ];

    // Apply filter
    List<Post> filteredPosts = allPosts;
    if (filter != null && filter != 'All') {
      filteredPosts = allPosts.where((post) {
        switch (filter) {
          case 'Trades':
            return post.type == PostType.trade;
          case 'Insights':
            return post.type == PostType.insight;
          default:
            return true;
        }
      }).toList();
    }

    // Apply pagination
    final startIndex = page * limit;
    final endIndex = (startIndex + limit).clamp(0, filteredPosts.length);
    
    if (startIndex >= filteredPosts.length) {
      return [];
    }

    return filteredPosts.sublist(startIndex, endIndex);
  }
}