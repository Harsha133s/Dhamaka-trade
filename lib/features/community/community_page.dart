// Auto-generated by TradeVerseAI Agent
// Purpose: Social feed to share trades, insights, and comments

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'widgets/create_post_card.dart';
import 'widgets/trade_card.dart';
import 'models/post_model.dart';
import 'providers/posts_provider.dart';

class CommunityPage extends ConsumerStatefulWidget {
  const CommunityPage({super.key});

  @override
  ConsumerState<CommunityPage> createState() => _CommunityPageState();
}

class _CommunityPageState extends ConsumerState<CommunityPage>
    with TickerProviderStateMixin {
  final ScrollController _scrollController = ScrollController();
  late TabController _tabController;

  // Filter options
  String _selectedFilter = 'All';

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 3, vsync: this);
    _scrollController.addListener(_onScroll);
  }

  @override
  void dispose() {
    _scrollController.dispose();
    _tabController.dispose();
    super.dispose();
  }

  void _onScroll() {
    // Load more posts when reaching bottom
    if (_scrollController.position.pixels == 
        _scrollController.position.maxScrollExtent) {
      ref.read(postsProvider.notifier).loadMorePosts();
    }
  }

  @override
  Widget build(BuildContext context) {
    final postsAsync = ref.watch(postsProvider);

    return Scaffold(
      body: RefreshIndicator(
        onRefresh: () => ref.refresh(postsProvider.future),
        child: CustomScrollView(
          controller: _scrollController,
          slivers: [
            _buildAppBar(context),
            _buildFilterTabs(),
            postsAsync.when(
              data: (posts) => _buildPostsList(posts),
              loading: () => const SliverFillRemaining(
                child: Center(child: CircularProgressIndicator()),
              ),
              error: (error, stack) => SliverFillRemaining(
                child: Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Icon(Icons.error_outline, size: 64, color: Colors.grey),
                      const SizedBox(height: 16),
                      Text('Error loading posts: $error'),
                      const SizedBox(height: 16),
                      ElevatedButton(
                        onPressed: () => ref.refresh(postsProvider),
                        child: const Text('Retry'),
                      ),
                    ],
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildAppBar(BuildContext context) {
    return SliverAppBar(
      expandedHeight: 120.0,
      floating: false,
      pinned: true,
      backgroundColor: Theme.of(context).scaffoldBackgroundColor,
      flexibleSpace: FlexibleSpaceBar(
        title: const Text(
          'Community',
          style: TextStyle(
            fontSize: 28,
            fontWeight: FontWeight.bold,
          ),
        ),
        background: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [
                Theme.of(context).primaryColor.withValues(alpha: 0.1),
                Theme.of(context).primaryColor.withValues(alpha: 0.05),
              ],
            ),
          ),
        ),
      ),
      actions: [
        IconButton(
          icon: const Icon(Icons.search),
          onPressed: _showSearchDialog,
          tooltip: 'Search Posts',
        ),
        PopupMenuButton<String>(
          icon: const Icon(Icons.more_vert),
          onSelected: (value) {
            switch (value) {
              case 'trending':
                _showTrendingPosts();
                break;
              case 'saved':
                _showSavedPosts();
                break;
              case 'settings':
                _showCommunitySettings();
                break;
            }
          },
          itemBuilder: (context) => [
            const PopupMenuItem(
              value: 'trending',
              child: ListTile(
                leading: Icon(Icons.trending_up),
                title: Text('Trending'),
                dense: true,
              ),
            ),
            const PopupMenuItem(
              value: 'saved',
              child: ListTile(
                leading: Icon(Icons.bookmark),
                title: Text('Saved Posts'),
                dense: true,
              ),
            ),
            const PopupMenuItem(
              value: 'settings',
              child: ListTile(
                leading: Icon(Icons.settings),
                title: Text('Community Settings'),
                dense: true,
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildFilterTabs() {
    return SliverToBoxAdapter(
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
        child: TabBar(
          controller: _tabController,
          labelColor: Theme.of(context).primaryColor,
          unselectedLabelColor: Colors.grey,
          indicatorColor: Theme.of(context).primaryColor,
          onTap: (index) {
            setState(() {
              _selectedFilter = ['All', 'Trades', 'Insights'][index];
            });
            ref.read(postsProvider.notifier).filterPosts(_selectedFilter);
          },
          tabs: const [
            Tab(
              icon: Icon(Icons.all_inclusive),
              text: 'All',
            ),
            Tab(
              icon: Icon(Icons.trending_up),
              text: 'Trades',
            ),
            Tab(
              icon: Icon(Icons.lightbulb_outline),
              text: 'Insights',
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildPostsList(List<Post> posts) {
    final filteredPosts = _filterPosts(posts);

    return SliverPadding(
      padding: const EdgeInsets.all(16),
      sliver: SliverList(
        delegate: SliverChildBuilderDelegate(
          (context, index) {
            if (index == 0) {
              // Create post card at the top
              return Column(
                children: [
                  CreatePostCard(
                    onPostCreated: (post) {
                      ref.read(postsProvider.notifier).addPost(post);
                    },
                  ),
                  const SizedBox(height: 16),
                ],
              );
            }
            
            // Adjust index for posts (subtract 1 for CreatePostCard)
            final postIndex = index - 1;
            if (postIndex >= filteredPosts.length) {
              // Loading indicator at the bottom
              return const Padding(
                padding: EdgeInsets.all(16.0),
                child: Center(child: CircularProgressIndicator()),
              );
            }

            final post = filteredPosts[postIndex];
            return Padding(
              padding: const EdgeInsets.only(bottom: 16),
              child: TradeCard(
                post: post,
                onLike: () => _handleLike(post),
                onComment: () => _showComments(post),
                onShare: () => _handleShare(post),
                onSave: () => _handleSave(post),
              ),
            );
          },
          childCount: filteredPosts.length + 2, // +1 for CreatePostCard, +1 for loading
        ),
      ),
    );
  }

  List<Post> _filterPosts(List<Post> posts) {
    switch (_selectedFilter) {
      case 'Trades':
        return posts.where((post) => post.type == PostType.trade).toList();
      case 'Insights':
        return posts.where((post) => post.type == PostType.insight).toList();
      default:
        return posts;
    }
  }

  // Action handlers
  void _handleLike(Post post) async {
    try {
      await ref.read(postsProvider.notifier).toggleLike(post.id);
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error liking post: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  void _showComments(Post post) {
    showModalBottomSheet<void>(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => DraggableScrollableSheet(
        initialChildSize: 0.7,
        maxChildSize: 0.95,
        minChildSize: 0.5,
        builder: (context, scrollController) => Container(
          decoration: BoxDecoration(
            color: Theme.of(context).scaffoldBackgroundColor,
            borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
          ),
          child: Column(
            children: [
              // Handle bar
              Container(
                margin: const EdgeInsets.symmetric(vertical: 12),
                width: 40,
                height: 4,
                decoration: BoxDecoration(
                  color: Colors.grey[300],
                  borderRadius: BorderRadius.circular(2),
                ),
              ),
              
              // Header
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 16),
                child: Row(
                  children: [
                    Text(
                      'Comments',
                      style: Theme.of(context).textTheme.titleLarge?.copyWith(
                            fontWeight: FontWeight.bold,
                          ),
                    ),
                    const Spacer(),
                    TextButton(
                      onPressed: () => Navigator.of(context).pop(),
                      child: const Text('Done'),
                    ),
                  ],
                ),
              ),
              
              const Divider(),
              
              // Comments list (placeholder for now)
              Expanded(
                child: ListView(
                  controller: scrollController,
                  padding: const EdgeInsets.all(16),
                  children: [
                    _buildCommentPlaceholder(),
                    _buildCommentPlaceholder(),
                    _buildCommentPlaceholder(),
                  ],
                ),
              ),
              
              // Comment input
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  border: Border(
                    top: BorderSide(color: Colors.grey.withValues(alpha: 0.3)),
                  ),
                ),
                child: Row(
                  children: [
                    Expanded(
                      child: TextField(
                        decoration: InputDecoration(
                          hintText: 'Write a comment...',
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(20),
                          ),
                          contentPadding: const EdgeInsets.symmetric(
                            horizontal: 16,
                            vertical: 8,
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(width: 8),
                    IconButton(
                      onPressed: () {
                        // TODO: Add comment
                      },
                      icon: Icon(
                        Icons.send,
                        color: Theme.of(context).primaryColor,
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildCommentPlaceholder() {
    return Padding(
      padding: const EdgeInsets.only(bottom: 16),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          CircleAvatar(
            radius: 16,
            backgroundColor: Colors.grey.withValues(alpha: 0.3),
            child: const Icon(Icons.person, size: 16),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'TraderUser',
                  style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                        fontWeight: FontWeight.bold,
                      ),
                ),
                const SizedBox(height: 4),
                Text(
                  'Great trade! I had a similar setup but missed the entry. Thanks for sharing!',
                  style: Theme.of(context).textTheme.bodyMedium,
                ),
                const SizedBox(height: 8),
                Row(
                  children: [
                    Text(
                      '5m ago',
                      style: Theme.of(context).textTheme.bodySmall?.copyWith(
                            color: Colors.grey,
                          ),
                    ),
                    const SizedBox(width: 16),
                    InkWell(
                      onTap: () {},
                      child: Text(
                        'Reply',
                        style: Theme.of(context).textTheme.bodySmall?.copyWith(
                              color: Theme.of(context).primaryColor,
                            ),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  void _handleShare(Post post) {
    // TODO: Implement share functionality
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Share functionality coming soon!'),
        backgroundColor: Colors.blue,
      ),
    );
  }

  void _handleSave(Post post) async {
    try {
      await ref.read(postsProvider.notifier).toggleSave(post.id);
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(post.isSaved ? 'Post unsaved' : 'Post saved'),
            backgroundColor: Colors.green,
          ),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error saving post: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  void _showSearchDialog() {
    showSearch(
      context: context,
      delegate: PostSearchDelegate(),
    );
  }

  void _showTrendingPosts() {
    // TODO: Navigate to trending posts
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Trending posts coming soon!'),
        backgroundColor: Colors.blue,
      ),
    );
  }

  void _showSavedPosts() {
    // TODO: Navigate to saved posts
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Saved posts coming soon!'),
        backgroundColor: Colors.blue,
      ),
    );
  }

  void _showCommunitySettings() {
    // TODO: Navigate to community settings
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Community settings coming soon!'),
        backgroundColor: Colors.blue,
      ),
    );
  }
}

// Search delegate for posts
class PostSearchDelegate extends SearchDelegate<Post?> {
  @override
  List<Widget> buildActions(BuildContext context) {
    return [
      IconButton(
        icon: const Icon(Icons.clear),
        onPressed: () {
          query = '';
        },
      ),
    ];
  }

  @override
  Widget buildLeading(BuildContext context) {
    return IconButton(
      icon: const Icon(Icons.arrow_back),
      onPressed: () {
        close(context, null);
      },
    );
  }

  @override
  Widget buildResults(BuildContext context) {
    // TODO: Implement search results
    return const Center(
      child: Text('Search results will appear here'),
    );
  }

  @override
  Widget buildSuggestions(BuildContext context) {
    // TODO: Implement search suggestions
    return ListView(
      children: [
        ListTile(
          title: Text('Search for "$query"'),
          leading: const Icon(Icons.search),
          onTap: () {
            // Perform search
          },
        ),
      ],
    );
  }
}