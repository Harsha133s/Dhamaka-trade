/// Auto-generated by TradeVerseAI Agent
/// Purpose: Enhanced Challenges Screen - Modern gamified trading competitions
/// Features: Tabbed interface, real-time leaderboards, achievement tracking, challenge analytics

import 'package:flutter/material.dart';
import '../widgets/active_challenges_section.dart';
import '../widgets/leaderboard_section.dart';
import '../widgets/achievements_section.dart';
import '../widgets/challenge_analytics_section.dart';
import '../widgets/create_challenge_dialog.dart';

class ChallengesScreen extends StatefulWidget {
  const ChallengesScreen({Key? key}) : super(key: key);

  @override
  State<ChallengesScreen> createState() => _ChallengesScreenState();
}

class _ChallengesScreenState extends State<ChallengesScreen>
    with TickerProviderStateMixin {
  late TabController _tabController;
  int _currentIndex = 0;
  bool _showAnalytics = false;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 4, vsync: this);
    _tabController.addListener(_handleTabChange);
  }

  @override
  void dispose() {
    _tabController.removeListener(_handleTabChange);
    _tabController.dispose();
    super.dispose();
  }

  void _handleTabChange() {
    if (_tabController.index != _currentIndex) {
      setState(() {
        _currentIndex = _tabController.index;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.transparent,
      body: Column(
        children: [
          _buildHeader(),
          _buildTabBar(),
          Expanded(
            child: TabBarView(
              controller: _tabController,
              children: [
                _buildActiveChallengesTab(),
                _buildLeaderboardTab(),
                _buildAchievementsTab(),
                _buildAnalyticsTab(),
              ],
            ),
          ),
        ],
      ),
      floatingActionButton: _currentIndex == 0
          ? FloatingActionButton.extended(
              onPressed: _showCreateChallengeDialog,
              backgroundColor: const Color(0xFF3B82F6),
              icon: const Icon(Icons.add, color: Colors.white),
              label: const Text(
                'Create Challenge',
                style: TextStyle(color: Colors.white, fontWeight: FontWeight.w600),
              ),
            )
          : null,
    );
  }

  Widget _buildHeader() {
    return Container(
      padding: const EdgeInsets.fromLTRB(20, 8, 20, 0),
      child: Row(
        children: [
          Icon(
            Icons.emoji_events,
            color: const Color(0xFFF59E0B),
            size: 28,
          ),
          const SizedBox(width: 12),
          Text(
            'Trading Challenges',
            style: Theme.of(context).textTheme.headlineMedium?.copyWith(
              fontWeight: FontWeight.w700,
              color: Colors.white,
            ),
          ),
          const Spacer(),
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
            decoration: BoxDecoration(
              gradient: const LinearGradient(
                colors: [Color(0xFF3B82F6), Color(0xFF1D4ED8)],
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
              ),
              borderRadius: BorderRadius.circular(20),
            ),
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                Icon(
                  Icons.workspace_premium,
                  size: 16,
                  color: Colors.white,
                ),
                const SizedBox(width: 6),
                Text(
                  '1,250 pts',
                  style: TextStyle(
                    color: Colors.white,
                    fontWeight: FontWeight.w600,
                    fontSize: 14,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildTabBar() {
    return Container(
      margin: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white.withValues(alpha: 0.05),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.white.withValues(alpha: 0.1)),
      ),
      child: TabBar(
        controller: _tabController,
        indicator: BoxDecoration(
          borderRadius: BorderRadius.circular(8),
          gradient: const LinearGradient(
            colors: [Color(0xFF3B82F6), Color(0xFF1D4ED8)],
          ),
        ),
        indicatorSize: TabBarIndicatorSize.tab,
        dividerColor: Colors.transparent,
        labelColor: Colors.white,
        unselectedLabelColor: Colors.white.withValues(alpha: 0.6),
        labelStyle: const TextStyle(
          fontWeight: FontWeight.w600,
          fontSize: 12,
        ),
        unselectedLabelStyle: const TextStyle(
          fontWeight: FontWeight.w500,
          fontSize: 12,
        ),
        tabs: const [
          Tab(
            icon: Icon(Icons.play_arrow, size: 18),
            text: 'Active',
          ),
          Tab(
            icon: Icon(Icons.leaderboard, size: 18),
            text: 'Rankings',
          ),
          Tab(
            icon: Icon(Icons.military_tech, size: 18),
            text: 'Achievements',
          ),
          Tab(
            icon: Icon(Icons.analytics, size: 18),
            text: 'Analytics',
          ),
        ],
      ),
    );
  }

  Widget _buildActiveChallengesTab() {
    return ListView(
      padding: const EdgeInsets.symmetric(horizontal: 16),
      children: const [
        ActiveChallengesSection(),
        SizedBox(height: 100), // Space for FAB
      ],
    );
  }

  Widget _buildLeaderboardTab() {
    return ListView(
      padding: const EdgeInsets.symmetric(horizontal: 16),
      children: const [
        LeaderboardSection(),
        SizedBox(height: 20),
      ],
    );
  }

  Widget _buildAchievementsTab() {
    return ListView(
      padding: const EdgeInsets.symmetric(horizontal: 16),
      children: const [
        AchievementsSection(),
        SizedBox(height: 20),
      ],
    );
  }

  Widget _buildAnalyticsTab() {
    return ListView(
      padding: const EdgeInsets.symmetric(horizontal: 16),
      children: const [
        ChallengeAnalyticsSection(),
        SizedBox(height: 20),
      ],
    );
  }

  void _showCreateChallengeDialog() {
    showDialog(
      context: context,
      builder: (context) => const CreateChallengeDialog(),
    );
  }
}
