/// Auto-generated by TradeVerseAI Agent
/// Purpose: Achievements Section displaying unlocked achievements from /achievements_master/

import 'package:flutter/material.dart';

class AchievementsSection extends StatefulWidget {
  const AchievementsSection({Key? key}) : super(key: key);

  @override
  State<AchievementsSection> createState() => _AchievementsSectionState();
}

class _AchievementsSectionState extends State<AchievementsSection>
    with SingleTickerProviderStateMixin {
  late AnimationController _animationController;
  bool _isLoading = true;
  List<Achievement> _achievements = [];
  List<Achievement> _filteredAchievements = [];
  String _selectedCategory = 'All';
  final List<String> _categories = ['All', 'Trading', 'Social', 'Milestones', 'Special'];

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 1200),
      vsync: this,
    );
    _loadAchievements();
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  Future<void> _loadAchievements() async {
    await Future.delayed(const Duration(seconds: 1));
    
    if (mounted) {
      setState(() {
        _achievements = _generateMockAchievements();
        _filteredAchievements = _achievements;
        _isLoading = false;
      });
      _animationController.forward();
    }
  }

  void _filterAchievements(String category) {
    setState(() {
      _selectedCategory = category;
      if (category == 'All') {
        _filteredAchievements = _achievements;
      } else {
        _filteredAchievements = _achievements.where((achievement) => 
          achievement.category == category
        ).toList();
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Row(
                  children: [
                    Icon(
                      Icons.workspace_premium,
                      color: const Color(0xFFF59E0B),
                      size: 24,
                    ),
                    const SizedBox(width: 12),
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Achievements',
                          style: Theme.of(context).textTheme.titleLarge?.copyWith(
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                        Text(
                          '${_getUnlockedCount()}/${_achievements.length} Unlocked',
                          style: Theme.of(context).textTheme.bodySmall?.copyWith(
                            color: Colors.white.withValues(alpha: 0.7),
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  decoration: BoxDecoration(
                    gradient: const LinearGradient(
                      colors: [Color(0xFF8B5CF6), Color(0xFF7C3AED)],
                    ),
                    borderRadius: BorderRadius.circular(20),
                  ),
                  child: Text(
                    '${_getProgressPercentage()}%',
                    style: const TextStyle(
                      color: Colors.white,
                      fontWeight: FontWeight.w600,
                      fontSize: 12,
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 12),
            _buildCategoryFilters(),
            const SizedBox(height: 20),
            if (_isLoading)
              _buildLoadingState()
            else
              _buildAchievementsGrid(),
          ],
        ),
      ),
    );
  }

  int _getUnlockedCount() {
    return _achievements.where((achievement) => achievement.isUnlocked).length;
  }

  int _getProgressPercentage() {
    if (_achievements.isEmpty) return 0;
    return ((_getUnlockedCount() / _achievements.length) * 100).round();
  }

  Widget _buildCategoryFilters() {
    return Container(
      height: 35,
      child: ListView.builder(
        scrollDirection: Axis.horizontal,
        itemCount: _categories.length,
        itemBuilder: (context, index) {
          final category = _categories[index];
          final isSelected = _selectedCategory == category;
          
          return GestureDetector(
            onTap: () => _filterAchievements(category),
            child: Container(
              margin: EdgeInsets.only(right: index < _categories.length - 1 ? 8 : 0),
              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
              decoration: BoxDecoration(
                color: isSelected
                    ? const Color(0xFF8B5CF6)
                    : Colors.white.withValues(alpha: 0.05),
                borderRadius: BorderRadius.circular(16),
                border: Border.all(
                  color: isSelected
                      ? const Color(0xFF8B5CF6)
                      : Colors.white.withValues(alpha: 0.2),
                ),
              ),
              child: Text(
                category,
                style: TextStyle(
                  color: isSelected
                      ? Colors.white
                      : Colors.white.withValues(alpha: 0.7),
                  fontWeight: FontWeight.w500,
                  fontSize: 12,
                ),
              ),
            ),
          );
        },
      ),
    );
  }

  Widget _buildLoadingState() {
    return GridView.builder(
      shrinkWrap: true,
      physics: const NeverScrollableScrollPhysics(),
      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: 4,
        crossAxisSpacing: 12,
        mainAxisSpacing: 12,
        childAspectRatio: 0.8,
      ),
      itemCount: 8,
      itemBuilder: (context, index) {
        return Container(
          padding: const EdgeInsets.all(12),
          decoration: BoxDecoration(
            color: Colors.white.withValues(alpha: 0.05),
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: Colors.white.withValues(alpha: 0.1)),
          ),
          child: Column(
            children: [
              Container(
                width: 40,
                height: 40,
                decoration: BoxDecoration(
                  color: Colors.white.withValues(alpha: 0.1),
                  shape: BoxShape.circle,
                ),
              ),
              const SizedBox(height: 8),
              Container(
                width: 60,
                height: 12,
                decoration: BoxDecoration(
                  color: Colors.white.withValues(alpha: 0.1),
                  borderRadius: BorderRadius.circular(4),
                ),
              ),
              const SizedBox(height: 4),
              Container(
                width: 40,
                height: 8,
                decoration: BoxDecoration(
                  color: Colors.white.withValues(alpha: 0.1),
                  borderRadius: BorderRadius.circular(4),
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  Widget _buildAchievementsGrid() {
    return AnimatedBuilder(
      animation: _animationController,
      builder: (context, child) {
        return GridView.builder(
          shrinkWrap: true,
          physics: const NeverScrollableScrollPhysics(),
          gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
            crossAxisCount: 4,
            crossAxisSpacing: 12,
            mainAxisSpacing: 12,
            childAspectRatio: 0.8,
          ),
          itemCount: _filteredAchievements.length,
          itemBuilder: (context, index) {
            final achievement = _filteredAchievements[index];
            
            // Calculate safe interval values that don't exceed 1.0
            final startProgress = (index / _filteredAchievements.length) * 0.4;
            final endProgress = startProgress + 0.6;
            
            final slideAnimation = Tween<Offset>(
              begin: const Offset(0, 0.5),
              end: Offset.zero,
            ).animate(CurvedAnimation(
              parent: _animationController,
              curve: Interval(
                startProgress.clamp(0.0, 1.0),
                endProgress.clamp(0.0, 1.0),
                curve: Curves.easeOutBack,
              ),
            ));
            
            return SlideTransition(
              position: slideAnimation,
              child: _buildAchievementBadge(achievement),
            );
          },
        );
      },
    );
  }

  Widget _buildAchievementBadge(Achievement achievement) {
    return GestureDetector(
      onTap: () => _showAchievementDetails(achievement),
      child: Container(
        padding: const EdgeInsets.all(12),
        decoration: BoxDecoration(
          color: achievement.isUnlocked 
              ? achievement.color.withValues(alpha: 0.1)
              : Colors.white.withValues(alpha: 0.05),
          borderRadius: BorderRadius.circular(12),
          border: Border.all(
            color: achievement.isUnlocked 
                ? achievement.color.withValues(alpha: 0.3)
                : Colors.white.withValues(alpha: 0.1),
            width: achievement.isUnlocked ? 2 : 1,
          ),
        ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Container(
              width: 40,
              height: 40,
              decoration: BoxDecoration(
                shape: BoxShape.circle,
                color: achievement.isUnlocked 
                    ? achievement.color.withValues(alpha: 0.2)
                    : Colors.white.withValues(alpha: 0.1),
              ),
              child: Icon(
                achievement.icon,
                color: achievement.isUnlocked 
                    ? achievement.color
                    : Colors.white.withValues(alpha: 0.3),
                size: 20,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              achievement.title,
              style: Theme.of(context).textTheme.bodySmall?.copyWith(
                fontWeight: FontWeight.w600,
                color: achievement.isUnlocked 
                    ? Colors.white
                    : Colors.white.withValues(alpha: 0.5),
              ),
              textAlign: TextAlign.center,
              maxLines: 2,
              overflow: TextOverflow.ellipsis,
            ),
            const SizedBox(height: 2),
            Text(
              achievement.rarity,
              style: Theme.of(context).textTheme.bodySmall?.copyWith(
                fontSize: 10,
                color: achievement.isUnlocked 
                    ? achievement.color
                    : Colors.white.withValues(alpha: 0.3),
                fontWeight: FontWeight.w500,
              ),
            ),
            if (!achievement.isUnlocked && achievement.progress != null && achievement.target != null) ...[
              const SizedBox(height: 4),
              Container(
                height: 2,
                width: double.infinity,
                decoration: BoxDecoration(
                  color: Colors.white.withValues(alpha: 0.1),
                  borderRadius: BorderRadius.circular(1),
                ),
                child: FractionallySizedBox(
                  alignment: Alignment.centerLeft,
                  widthFactor: (achievement.progress! / achievement.target!).clamp(0.0, 1.0),
                  child: Container(
                    decoration: BoxDecoration(
                      color: achievement.color.withValues(alpha: 0.7),
                      borderRadius: BorderRadius.circular(1),
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 2),
              Text(
                '${achievement.progress?.toStringAsFixed(0)}/${achievement.target?.toStringAsFixed(0)}',
                style: TextStyle(
                  fontSize: 8,
                  color: achievement.color.withValues(alpha: 0.7),
                  fontWeight: FontWeight.w500,
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }

  List<Achievement> _generateMockAchievements() {
    return [
      Achievement(
        id: '1',
        title: 'First Win',
        description: 'Win your first challenge',
        category: 'Milestones',
        icon: Icons.emoji_events,
        color: const Color(0xFFFFD700),
        rarity: 'Common',
        isUnlocked: true,
        unlockedAt: DateTime.now().subtract(const Duration(days: 5)),
      ),
      Achievement(
        id: '2',
        title: 'Risk Master',
        description: 'Complete 50 trades with max 2% risk',
        category: 'Trading',
        icon: Icons.shield,
        color: const Color(0xFF3B82F6),
        rarity: 'Rare',
        isUnlocked: true,
        unlockedAt: DateTime.now().subtract(const Duration(days: 3)),
      ),
      Achievement(
        id: '3',
        title: 'Profit King',
        description: 'Achieve 20% monthly profit',
        category: 'Trading',
        icon: Icons.trending_up,
        color: const Color(0xFF10B981),
        rarity: 'Epic',
        isUnlocked: false,
        progress: 12.5,
        target: 20.0,
      ),
      Achievement(
        id: '4',
        title: 'Consistent',
        description: 'Trade for 30 consecutive days',
        category: 'Trading',
        icon: Icons.calendar_today,
        color: const Color(0xFF8B5CF6),
        rarity: 'Rare',
        isUnlocked: true,
        unlockedAt: DateTime.now().subtract(const Duration(days: 1)),
      ),
      Achievement(
        id: '5',
        title: 'Sharp Shooter',
        description: 'Achieve 90% win rate in 20 trades',
        category: 'Trading',
        icon: Icons.gps_fixed,
        color: const Color(0xFFEF4444),
        rarity: 'Legendary',
        isUnlocked: false,
        progress: 15.0,
        target: 20.0,
      ),
      Achievement(
        id: '6',
        title: 'Community Hero',
        description: 'Help 10 other traders',
        category: 'Social',
        icon: Icons.favorite,
        color: const Color(0xFFEC4899),
        rarity: 'Rare',
        isUnlocked: false,
        progress: 6.0,
        target: 10.0,
      ),
      Achievement(
        id: '7',
        title: 'Speed Demon',
        description: 'Complete 100 scalp trades',
        category: 'Special',
        icon: Icons.flash_on,
        color: const Color(0xFFF59E0B),
        rarity: 'Epic',
        isUnlocked: false,
        progress: 73.0,
        target: 100.0,
      ),
      Achievement(
        id: '8',
        title: 'Mentor',
        description: 'Reach top 10 on leaderboard',
        category: 'Milestones',
        icon: Icons.school,
        color: const Color(0xFF06B6D4),
        rarity: 'Epic',
        isUnlocked: false,
      ),
      Achievement(
        id: '9',
        title: 'Social Star',
        description: 'Get 50 likes on posts',
        category: 'Social',
        icon: Icons.star,
        color: const Color(0xFFEC4899),
        rarity: 'Common',
        isUnlocked: true,
        unlockedAt: DateTime.now().subtract(const Duration(hours: 6)),
      ),
      Achievement(
        id: '10',
        title: 'Diamond Hands',
        description: 'Hold positions for 30+ days',
        category: 'Special',
        icon: Icons.diamond,
        color: const Color(0xFF8B5CF6),
        rarity: 'Legendary',
        isUnlocked: false,
        progress: 18.0,
        target: 30.0,
      ),
    ];
  }

  void _showAchievementDetails(Achievement achievement) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Row(
          children: [
            Icon(achievement.icon, color: achievement.color),
            const SizedBox(width: 12),
            Text(achievement.title),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(achievement.description),
            const SizedBox(height: 12),
            Row(
              children: [
                Text('Rarity: '),
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 2),
                  decoration: BoxDecoration(
                    color: achievement.color.withValues(alpha: 0.1),
                    borderRadius: BorderRadius.circular(4),
                    border: Border.all(color: achievement.color),
                  ),
                  child: Text(
                    achievement.rarity,
                    style: TextStyle(
                      color: achievement.color,
                      fontSize: 12,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ),
              ],
            ),
            if (achievement.isUnlocked && achievement.unlockedAt != null) ...[
              const SizedBox(height: 8),
              Text(
                'Unlocked: ${achievement.unlockedAt!.day}/${achievement.unlockedAt!.month}/${achievement.unlockedAt!.year}',
                style: Theme.of(context).textTheme.bodySmall?.copyWith(
                  color: Colors.white.withValues(alpha: 0.7),
                ),
              ),
            ],
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Close'),
          ),
        ],
      ),
    );
  }

  void _showAllAchievements() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Navigate to all achievements screen'),
        duration: Duration(seconds: 2),
      ),
    );
  }
}

class Achievement {
  final String id;
  final String title;
  final String description;
  final String category;
  final IconData icon;
  final Color color;
  final String rarity;
  final bool isUnlocked;
  final DateTime? unlockedAt;
  final double? progress; // For partially completed achievements
  final double? target;   // Target for progress tracking

  Achievement({
    required this.id,
    required this.title,
    required this.description,
    required this.category,
    required this.icon,
    required this.color,
    required this.rarity,
    required this.isUnlocked,
    this.unlockedAt,
    this.progress,
    this.target,
  });
}
