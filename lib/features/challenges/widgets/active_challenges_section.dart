/// Auto-generated by TradeVerseAI Agent
/// Purpose: Active Challenges Section showing user's joined challenges with progress tracking

import 'package:flutter/material.dart';

class ActiveChallengesSection extends StatefulWidget {
  const ActiveChallengesSection({Key? key}) : super(key: key);

  @override
  State<ActiveChallengesSection> createState() => _ActiveChallengesSectionState();
}

class _ActiveChallengesSectionState extends State<ActiveChallengesSection>
    with SingleTickerProviderStateMixin {
  late AnimationController _animationController;
  bool _isLoading = true;
  List<Challenge> _challenges = [];
  List<Challenge> _filteredChallenges = [];
  String _selectedFilter = 'All';
  final List<String> _filters = ['All', 'Profit', 'Risk Management', 'Consistency', 'Community'];

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );
    _loadChallenges();
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  Future<void> _loadChallenges() async {
    // Simulate loading
    await Future.delayed(const Duration(seconds: 1));
    
    if (mounted) {
      setState(() {
        _challenges = _generateMockChallenges();
        _filteredChallenges = _challenges;
        _isLoading = false;
      });
      _animationController.forward();
    }
  }

  void _filterChallenges(String filter) {
    setState(() {
      _selectedFilter = filter;
      if (filter == 'All') {
        _filteredChallenges = _challenges;
      } else {
        _filteredChallenges = _challenges.where((challenge) => 
          challenge.category == filter
        ).toList();
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Row(
                  children: [
                    Icon(
                      Icons.emoji_events,
                      color: const Color(0xFFF59E0B),
                      size: 24,
                    ),
                    const SizedBox(width: 12),
                    Text(
                      'Active Challenges',
                      style: Theme.of(context).textTheme.titleLarge?.copyWith(
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ],
                ),
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  decoration: BoxDecoration(
                    gradient: const LinearGradient(
                      colors: [Color(0xFF10B981), Color(0xFF059669)],
                    ),
                    borderRadius: BorderRadius.circular(20),
                  ),
                  child: Text(
                    '${_filteredChallenges.length} Active',
                    style: const TextStyle(
                      color: Colors.white,
                      fontWeight: FontWeight.w600,
                      fontSize: 12,
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            _buildFilterTabs(),
            const SizedBox(height: 20),
            if (_isLoading)
              _buildLoadingState()
            else if (_filteredChallenges.isEmpty)
              _buildEmptyState()
            else
              _buildChallengesList(),
          ],
        ),
      ),
    );
  }

  Widget _buildLoadingState() {
    return Column(
      children: List.generate(3, (index) => _buildLoadingCard()),
    );
  }

  Widget _buildLoadingCard() {
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white.withValues(alpha: 0.05),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.white.withValues(alpha: 0.1)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                width: 40,
                height: 40,
                decoration: BoxDecoration(
                  color: Colors.white.withValues(alpha: 0.1),
                  borderRadius: BorderRadius.circular(8),
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Container(
                      width: 120,
                      height: 16,
                      decoration: BoxDecoration(
                        color: Colors.white.withValues(alpha: 0.1),
                        borderRadius: BorderRadius.circular(4),
                      ),
                    ),
                    const SizedBox(height: 8),
                    Container(
                      width: 80,
                      height: 12,
                      decoration: BoxDecoration(
                        color: Colors.white.withValues(alpha: 0.1),
                        borderRadius: BorderRadius.circular(4),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          Container(
            height: 8,
            width: double.infinity,
            decoration: BoxDecoration(
              color: Colors.white.withValues(alpha: 0.1),
              borderRadius: BorderRadius.circular(4),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildFilterTabs() {
    return Container(
      height: 40,
      child: ListView.builder(
        scrollDirection: Axis.horizontal,
        itemCount: _filters.length,
        itemBuilder: (context, index) {
          final filter = _filters[index];
          final isSelected = _selectedFilter == filter;
          
          return GestureDetector(
            onTap: () => _filterChallenges(filter),
            child: Container(
              margin: EdgeInsets.only(right: index < _filters.length - 1 ? 8 : 0),
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
              decoration: BoxDecoration(
                color: isSelected
                    ? const Color(0xFF3B82F6)
                    : Colors.white.withValues(alpha: 0.05),
                borderRadius: BorderRadius.circular(20),
                border: Border.all(
                  color: isSelected
                      ? const Color(0xFF3B82F6)
                      : Colors.white.withValues(alpha: 0.2),
                ),
              ),
              child: Text(
                filter,
                style: TextStyle(
                  color: isSelected
                      ? Colors.white
                      : Colors.white.withValues(alpha: 0.7),
                  fontWeight: FontWeight.w500,
                  fontSize: 14,
                ),
              ),
            ),
          );
        },
      ),
    );
  }

  Widget _buildEmptyState() {
    return Container(
      padding: const EdgeInsets.all(40),
      child: Center(
        child: Column(
          children: [
            Icon(
              Icons.emoji_events_outlined,
              size: 64,
              color: Colors.white.withValues(alpha: 0.3),
            ),
            const SizedBox(height: 16),
            Text(
              'No Active Challenges',
              style: Theme.of(context).textTheme.titleMedium?.copyWith(
                color: Colors.white.withValues(alpha: 0.7),
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Join challenges to compete with other traders',
              style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                color: Colors.white.withValues(alpha: 0.5),
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 20),
            ElevatedButton.icon(
              onPressed: _showAllChallenges,
              icon: const Icon(Icons.search),
              label: const Text('Browse Challenges'),
              style: ElevatedButton.styleFrom(
                backgroundColor: const Color(0xFF3B82F6),
                foregroundColor: Colors.white,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildChallengesList() {
    return Column(
      children: _filteredChallenges.asMap().entries.map((entry) {
        final index = entry.key;
        final challenge = entry.value;
        
        return AnimatedBuilder(
          animation: _animationController,
          builder: (context, child) {
            // Calculate safe interval values that don't exceed 1.0
            final startProgress = (index / _filteredChallenges.length) * 0.4;
            final endProgress = startProgress + 0.6;
            
            final slideAnimation = Tween<Offset>(
              begin: const Offset(1, 0),
              end: Offset.zero,
            ).animate(CurvedAnimation(
              parent: _animationController,
              curve: Interval(
                startProgress.clamp(0.0, 1.0),
                endProgress.clamp(0.0, 1.0),
                curve: Curves.easeOutBack,
              ),
            ));

            return SlideTransition(
              position: slideAnimation,
              child: _buildChallengeCard(challenge),
            );
          },
        );
      }).toList(),
    );
  }

  Widget _buildChallengeCard(Challenge challenge) {
    final progressPercentage = challenge.progress / challenge.target;
    final daysLeft = challenge.endDate.difference(DateTime.now()).inDays;
    
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      child: Card(
        elevation: 2,
        child: InkWell(
          onTap: () => _showChallengeDetails(challenge),
          borderRadius: BorderRadius.circular(8),
          child: Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(8),
              gradient: LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [
                  challenge.color.withValues(alpha: 0.1),
                  challenge.color.withValues(alpha: 0.05),
                ],
              ),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Container(
                      padding: const EdgeInsets.all(8),
                      decoration: BoxDecoration(
                        color: challenge.color.withValues(alpha: 0.2),
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: Icon(
                        challenge.icon,
                        color: challenge.color,
                        size: 24,
                      ),
                    ),
                    const SizedBox(width: 12),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            challenge.title,
                            style: Theme.of(context).textTheme.titleMedium?.copyWith(
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                          const SizedBox(height: 4),
                          Text(
                            challenge.description,
                            style: Theme.of(context).textTheme.bodySmall?.copyWith(
                              color: Colors.white.withValues(alpha: 0.7),
                            ),
                          ),
                        ],
                      ),
                    ),
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.end,
                      children: [
                        Container(
                          padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                          decoration: BoxDecoration(
                            color: daysLeft > 7 
                                ? const Color(0xFF10B981).withValues(alpha: 0.1)
                                : const Color(0xFFF59E0B).withValues(alpha: 0.1),
                            borderRadius: BorderRadius.circular(12),
                            border: Border.all(
                              color: daysLeft > 7 
                                  ? const Color(0xFF10B981)
                                  : const Color(0xFFF59E0B),
                            ),
                          ),
                          child: Text(
                            '$daysLeft days left',
                            style: TextStyle(
                              fontSize: 11,
                              fontWeight: FontWeight.w600,
                              color: daysLeft > 7 
                                  ? const Color(0xFF10B981)
                                  : const Color(0xFFF59E0B),
                            ),
                          ),
                        ),
                        const SizedBox(height: 4),
                        Text(
                          challenge.reward,
                          style: Theme.of(context).textTheme.bodySmall?.copyWith(
                            color: const Color(0xFFF59E0B),
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
                const SizedBox(height: 16),
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text(
                          'Progress: ${challenge.progress.toStringAsFixed(1)}/${challenge.target.toStringAsFixed(1)} ${challenge.unit}',
                          style: Theme.of(context).textTheme.bodySmall?.copyWith(
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                        Text(
                          '${(progressPercentage * 100).toStringAsFixed(1)}%',
                          style: Theme.of(context).textTheme.bodySmall?.copyWith(
                            color: challenge.color,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    ClipRRect(
                      borderRadius: BorderRadius.circular(4),
                      child: LinearProgressIndicator(
                        value: progressPercentage.clamp(0.0, 1.0),
                        backgroundColor: Colors.white.withValues(alpha: 0.1),
                        valueColor: AlwaysStoppedAnimation<Color>(challenge.color),
                        minHeight: 8,
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  List<Challenge> _generateMockChallenges() {
    return [
      Challenge(
        id: '1',
        title: 'Weekly Profit Master',
        description: 'Achieve 5% profit this week',
        category: 'Profit',
        target: 5.0,
        progress: 3.2,
        unit: '%',
        reward: '\$50 Bonus',
        endDate: DateTime.now().add(const Duration(days: 3)),
        color: const Color(0xFF10B981),
        icon: Icons.trending_up,
      ),
      Challenge(
        id: '2',
        title: 'Risk Management Pro',
        description: 'Complete 20 trades with max 2% risk',
        category: 'Risk Management',
        target: 20.0,
        progress: 12.0,
        unit: 'trades',
        reward: 'Risk Master Badge',
        endDate: DateTime.now().add(const Duration(days: 12)),
        color: const Color(0xFF3B82F6),
        icon: Icons.shield,
      ),
      Challenge(
        id: '3',
        title: 'Consistency Champion',
        description: 'Trade for 7 consecutive days',
        category: 'Consistency',
        target: 7.0,
        progress: 4.0,
        unit: 'days',
        reward: 'Consistency Badge',
        endDate: DateTime.now().add(const Duration(days: 8)),
        color: const Color(0xFF8B5CF6),
        icon: Icons.calendar_today,
      ),
      Challenge(
        id: '4',
        title: 'Community Helper',
        description: 'Help 5 traders in the community',
        category: 'Community',
        target: 5.0,
        progress: 2.0,
        unit: 'helps',
        reward: 'Community Star',
        endDate: DateTime.now().add(const Duration(days: 14)),
        color: const Color(0xFFEC4899),
        icon: Icons.people,
      ),
      Challenge(
        id: '5',
        title: 'Monthly Profit Goal',
        description: 'Reach 15% monthly returns',
        category: 'Profit',
        target: 15.0,
        progress: 8.5,
        unit: '%',
        reward: 'Elite Trader Badge',
        endDate: DateTime.now().add(const Duration(days: 22)),
        color: const Color(0xFF10B981),
        icon: Icons.trending_up,
      ),
    ];
  }

  void _showChallengeDetails(Challenge challenge) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(challenge.title),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(challenge.description),
            const SizedBox(height: 16),
            Text('Progress: ${challenge.progress}/${challenge.target} ${challenge.unit}'),
            Text('Reward: ${challenge.reward}'),
            Text('Days left: ${challenge.endDate.difference(DateTime.now()).inDays}'),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Close'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _leaveChallengeConfirmation(challenge);
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: const Color(0xFFEF4444),
            ),
            child: const Text('Leave Challenge'),
          ),
        ],
      ),
    );
  }

  void _leaveChallengeConfirmation(Challenge challenge) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Leave Challenge?'),
        content: Text('Are you sure you want to leave "${challenge.title}"? You will lose all progress.'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _leaveChallenge(challenge);
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: const Color(0xFFEF4444),
            ),
            child: const Text('Leave'),
          ),
        ],
      ),
    );
  }

  void _leaveChallenge(Challenge challenge) {
    setState(() {
      _challenges.removeWhere((c) => c.id == challenge.id);
    });
    
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Left challenge: ${challenge.title}'),
        backgroundColor: const Color(0xFFEF4444),
      ),
    );
  }

  void _showAllChallenges() {
    // Navigate to all challenges screen
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Navigate to all challenges screen'),
        duration: Duration(seconds: 2),
      ),
    );
  }
}

class Challenge {
  final String id;
  final String title;
  final String description;
  final String category;
  final double target;
  final double progress;
  final String unit;
  final String reward;
  final DateTime endDate;
  final Color color;
  final IconData icon;

  Challenge({
    required this.id,
    required this.title,
    required this.description,
    required this.category,
    required this.target,
    required this.progress,
    required this.unit,
    required this.reward,
    required this.endDate,
    required this.color,
    required this.icon,
  });
}
