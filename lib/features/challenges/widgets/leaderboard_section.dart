/// Auto-generated by TradeVerseAI Agent
/// Purpose: Leaderboard Section ranking traders based on challenge metrics

import 'package:flutter/material.dart';

class LeaderboardSection extends StatefulWidget {
  const LeaderboardSection({Key? key}) : super(key: key);

  @override
  State<LeaderboardSection> createState() => _LeaderboardSectionState();
}

class _LeaderboardSectionState extends State<LeaderboardSection>
    with SingleTickerProviderStateMixin {
  late AnimationController _animationController;
  bool _isLoading = true;
  List<LeaderboardEntry> _leaderboard = [];
  String _selectedPeriod = 'weekly';
  int _currentUserRank = 4;
  bool _isLiveUpdating = false;

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    );
    _loadLeaderboard();
    _startLiveUpdates();
  }

  void _startLiveUpdates() {
    // Simulate live updates every 30 seconds
    Future.delayed(const Duration(seconds: 30), () {
      if (mounted) {
        _simulateLiveUpdate();
        _startLiveUpdates();
      }
    });
  }

  void _simulateLiveUpdate() {
    if (!_isLiveUpdating && _leaderboard.isNotEmpty) {
      setState(() => _isLiveUpdating = true);
      
      // Simulate small ranking changes
      Future.delayed(const Duration(milliseconds: 500), () {
        if (mounted) {
          setState(() {
            // Randomly adjust scores slightly
            for (var entry in _leaderboard) {
              entry.score += (DateTime.now().millisecond % 10) - 5;
            }
            // Re-sort by score
            _leaderboard.sort((a, b) => b.score.compareTo(a.score));
            _isLiveUpdating = false;
          });
        }
      });
    }
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  Future<void> _loadLeaderboard() async {
    setState(() => _isLoading = true);
    await Future.delayed(const Duration(seconds: 1));
    
    if (mounted) {
      setState(() {
        _leaderboard = _generateMockLeaderboard();
        _isLoading = false;
      });
      _animationController.forward();
    }
  }

  @override
  Widget build(BuildContext context) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Row(
                  children: [
                    Icon(
                      Icons.leaderboard,
                      color: const Color(0xFF3B82F6),
                      size: 24,
                    ),
                    const SizedBox(width: 12),
                    Text(
                      'Leaderboard',
                      style: Theme.of(context).textTheme.titleLarge?.copyWith(
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                    const SizedBox(width: 8),
                    if (_isLiveUpdating)
                      Container(
                        width: 8,
                        height: 8,
                        decoration: const BoxDecoration(
                          color: Color(0xFF10B981),
                          shape: BoxShape.circle,
                        ),
                        child: const CircularProgressIndicator(
                          strokeWidth: 2,
                          valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                        ),
                      ),
                  ],
                ),
                _buildPeriodSelector(),
              ],
            ),
            const SizedBox(height: 12),
            _buildCurrentUserRank(),
            const SizedBox(height: 20),
            if (_isLoading)
              _buildLoadingState()
            else
              _buildLeaderboard(),
          ],
        ),
      ),
    );
  }

  Widget _buildPeriodSelector() {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white.withValues(alpha: 0.05),
        borderRadius: BorderRadius.circular(6),
        border: Border.all(color: Colors.white.withValues(alpha: 0.1)),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: ['weekly', 'monthly', 'all-time'].map((period) {
          final isSelected = _selectedPeriod == period;
          return GestureDetector(
            onTap: () => _changePeriod(period),
            child: Container(
              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
              decoration: BoxDecoration(
                color: isSelected ? const Color(0xFF3B82F6) : Colors.transparent,
                borderRadius: BorderRadius.circular(4),
              ),
              child: Text(
                period == 'all-time' ? 'All Time' : period.toUpperCase(),
                style: TextStyle(
                  color: isSelected ? Colors.white : Colors.white.withValues(alpha: 0.7),
                  fontSize: 12,
                  fontWeight: FontWeight.w500,
                ),
              ),
            ),
          );
        }).toList(),
      ),
    );
  }

  Widget _buildLoadingState() {
    return Column(
      children: List.generate(5, (index) => _buildLoadingItem()),
    );
  }

  Widget _buildCurrentUserRank() {
    if (_isLoading || _leaderboard.isEmpty) return const SizedBox.shrink();
    
    final userTier = _getUserTier(_currentUserRank);
    
    return Container(
      padding: const EdgeInsets.all(12),
      margin: const EdgeInsets.only(bottom: 16),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            userTier.color.withValues(alpha: 0.1),
            userTier.color.withValues(alpha: 0.05),
          ],
        ),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: userTier.color.withValues(alpha: 0.3)),
      ),
      child: Row(
        children: [
          Container(
            width: 36,
            height: 36,
            decoration: BoxDecoration(
              color: userTier.color.withValues(alpha: 0.2),
              shape: BoxShape.circle,
              border: Border.all(color: userTier.color, width: 2),
            ),
            child: Center(
              child: Text(
                '#$_currentUserRank',
                style: TextStyle(
                  color: userTier.color,
                  fontWeight: FontWeight.w700,
                  fontSize: 12,
                ),
              ),
            ),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'Your Current Rank',
                  style: Theme.of(context).textTheme.bodySmall?.copyWith(
                    color: Colors.white.withValues(alpha: 0.7),
                  ),
                ),
                Text(
                  userTier.name,
                  style: Theme.of(context).textTheme.titleSmall?.copyWith(
                    color: userTier.color,
                    fontWeight: FontWeight.w600,
                  ),
                ),
              ],
            ),
          ),
          Icon(
            userTier.icon,
            color: userTier.color,
            size: 24,
          ),
        ],
      ),
    );
  }

  UserTier _getUserTier(int rank) {
    if (rank <= 3) {
      return UserTier(
        name: 'Legend',
        color: const Color(0xFFFFD700),
        icon: Icons.emoji_events,
      );
    } else if (rank <= 10) {
      return UserTier(
        name: 'Master',
        color: const Color(0xFF8B5CF6),
        icon: Icons.military_tech,
      );
    } else if (rank <= 25) {
      return UserTier(
        name: 'Expert',
        color: const Color(0xFF3B82F6),
        icon: Icons.school,
      );
    } else if (rank <= 50) {
      return UserTier(
        name: 'Advanced',
        color: const Color(0xFF10B981),
        icon: Icons.trending_up,
      );
    } else {
      return UserTier(
        name: 'Beginner',
        color: const Color(0xFF6B7280),
        icon: Icons.person,
      );
    }
  }

  Widget _buildLoadingItem() {
    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white.withValues(alpha: 0.05),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Row(
        children: [
          Container(
            width: 40,
            height: 40,
            decoration: BoxDecoration(
              color: Colors.white.withValues(alpha: 0.1),
              shape: BoxShape.circle,
            ),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Container(
                  width: 100,
                  height: 16,
                  decoration: BoxDecoration(
                    color: Colors.white.withValues(alpha: 0.1),
                    borderRadius: BorderRadius.circular(4),
                  ),
                ),
                const SizedBox(height: 8),
                Container(
                  width: 60,
                  height: 12,
                  decoration: BoxDecoration(
                    color: Colors.white.withValues(alpha: 0.1),
                    borderRadius: BorderRadius.circular(4),
                  ),
                ),
              ],
            ),
          ),
          Container(
            width: 50,
            height: 16,
            decoration: BoxDecoration(
              color: Colors.white.withValues(alpha: 0.1),
              borderRadius: BorderRadius.circular(4),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildLeaderboard() {
    return Column(
      children: _leaderboard.asMap().entries.map((entry) {
        final index = entry.key;
        final leader = entry.value;
        
        return AnimatedBuilder(
          animation: _animationController,
          builder: (context, child) {
            // Calculate safe interval values that don't exceed 1.0
            final startProgress = (index / _leaderboard.length) * 0.6;
            final endProgress = startProgress + 0.4;
            
            final slideAnimation = Tween<Offset>(
              begin: const Offset(0, 1),
              end: Offset.zero,
            ).animate(CurvedAnimation(
              parent: _animationController,
              curve: Interval(
                startProgress.clamp(0.0, 1.0),
                endProgress.clamp(0.0, 1.0),
                curve: Curves.easeOutBack,
              ),
            ));

            return SlideTransition(
              position: slideAnimation,
              child: _buildLeaderboardItem(leader, index),
            );
          },
        );
      }).toList(),
    );
  }

  Widget _buildLeaderboardItem(LeaderboardEntry entry, int index) {
    final isTopThree = index < 3;
    final rank = index + 1;
    final userTier = _getUserTier(rank);
    final medalColors = [
      const Color(0xFFFFD700), // Gold
      const Color(0xFFC0C0C0), // Silver  
      const Color(0xFFCD7F32), // Bronze
    ];
    
    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      child: Card(
        elevation: isTopThree ? 3 : 1,
        child: Container(
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(8),
            gradient: isTopThree ? LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [
                medalColors[index].withValues(alpha: 0.1),
                medalColors[index].withValues(alpha: 0.05),
              ],
            ) : null,
          ),
          child: Row(
            children: [
              Container(
                width: 40,
                height: 40,
                decoration: BoxDecoration(
                  shape: BoxShape.circle,
                  color: isTopThree ? medalColors[index].withValues(alpha: 0.2) : Colors.white.withValues(alpha: 0.1),
                  border: isTopThree ? Border.all(color: medalColors[index], width: 2) : null,
                ),
                child: Center(
                  child: isTopThree 
                      ? Icon(
                          index == 0 ? Icons.emoji_events : Icons.military_tech,
                          color: medalColors[index],
                          size: 20,
                        )
                      : Text(
                          '${index + 1}',
                          style: const TextStyle(
                            fontWeight: FontWeight.w600,
                            color: Colors.white,
                          ),
                        ),
                ),
              ),
              const SizedBox(width: 16),
              CircleAvatar(
                radius: 20,
                backgroundColor: entry.avatarColor,
                child: Text(
                  entry.username[0].toUpperCase(),
                  style: const TextStyle(
                    color: Colors.white,
                    fontWeight: FontWeight.w600,
                  ),
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Text(
                          entry.username,
                          style: Theme.of(context).textTheme.titleSmall?.copyWith(
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                        const SizedBox(width: 8),
                        Container(
                          padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                          decoration: BoxDecoration(
                            color: userTier.color.withValues(alpha: 0.2),
                            borderRadius: BorderRadius.circular(8),
                            border: Border.all(color: userTier.color.withValues(alpha: 0.5)),
                          ),
                          child: Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              Icon(
                                userTier.icon,
                                size: 10,
                                color: userTier.color,
                              ),
                              const SizedBox(width: 2),
                              Text(
                                userTier.name,
                                style: TextStyle(
                                  fontSize: 10,
                                  fontWeight: FontWeight.w600,
                                  color: userTier.color,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 2),
                    Text(
                      '${entry.challengesWon} challenges won',
                      style: Theme.of(context).textTheme.bodySmall?.copyWith(
                        color: Colors.white.withValues(alpha: 0.7),
                      ),
                    ),
                  ],
                ),
              ),
              Column(
                crossAxisAlignment: CrossAxisAlignment.end,
                children: [
                  Text(
                    '${entry.score.toStringAsFixed(0)} pts',
                    style: Theme.of(context).textTheme.titleSmall?.copyWith(
                      fontWeight: FontWeight.w600,
                      color: isTopThree ? medalColors[index] : const Color(0xFF10B981),
                    ),
                  ),
                  const SizedBox(height: 2),
                  Text(
                    '${entry.profitPercentage >= 0 ? '+' : ''}${entry.profitPercentage.toStringAsFixed(1)}%',
                    style: Theme.of(context).textTheme.bodySmall?.copyWith(
                      color: entry.profitPercentage >= 0 
                          ? const Color(0xFF10B981)
                          : const Color(0xFFEF4444),
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  List<LeaderboardEntry> _generateMockLeaderboard() {
    final names = ['Alex M.', 'Sarah K.', 'Mike R.', 'Emma L.', 'John D.', 'Lisa W.', 'Tom B.'];
    final colors = [
      const Color(0xFF3B82F6), const Color(0xFF10B981), const Color(0xFFF59E0B),
      const Color(0xFF8B5CF6), const Color(0xFFEF4444), const Color(0xFF06B6D4), 
      const Color(0xFFEC4899),
    ];
    
    return List.generate(names.length, (index) {
      return LeaderboardEntry(
        username: names[index],
        score: 1000 - (index * 80) + (index * 15),
        profitPercentage: 15.0 - (index * 2.0) + (index * 0.5),
        challengesWon: 5 - index,
        avatarColor: colors[index],
      );
    });
  }

  void _changePeriod(String period) {
    setState(() => _selectedPeriod = period);
    _loadLeaderboard();
  }
}

class LeaderboardEntry {
  final String username;
  double score; // Made mutable for live updates
  final double profitPercentage;
  final int challengesWon;
  final Color avatarColor;

  LeaderboardEntry({
    required this.username,
    required this.score,
    required this.profitPercentage,
    required this.challengesWon,
    required this.avatarColor,
  });
}

class UserTier {
  final String name;
  final Color color;
  final IconData icon;

  UserTier({
    required this.name,
    required this.color,
    required this.icon,
  });
}
