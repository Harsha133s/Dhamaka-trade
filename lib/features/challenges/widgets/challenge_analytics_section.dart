/// Auto-generated by TradeVerseAI Agent
/// Purpose: Challenge Analytics Section displaying user's performance metrics and statistics

import 'package:flutter/material.dart';

class ChallengeAnalyticsSection extends StatefulWidget {
  const ChallengeAnalyticsSection({Key? key}) : super(key: key);

  @override
  State<ChallengeAnalyticsSection> createState() => _ChallengeAnalyticsSectionState();
}

class _ChallengeAnalyticsSectionState extends State<ChallengeAnalyticsSection>
    with SingleTickerProviderStateMixin {
  late AnimationController _animationController;
  bool _isLoading = true;
  ChallengeStats? _stats;

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 1200),
      vsync: this,
    );
    _loadStats();
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  Future<void> _loadStats() async {
    await Future.delayed(const Duration(seconds: 1));
    
    if (mounted) {
      setState(() {
        _stats = _generateMockStats();
        _isLoading = false;
      });
      _animationController.forward();
    }
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        _buildOverviewCard(),
        const SizedBox(height: 16),
        _buildPerformanceChart(),
        const SizedBox(height: 16),
        _buildCategoryBreakdown(),
        const SizedBox(height: 16),
        _buildRecentActivity(),
      ],
    );
  }

  Widget _buildOverviewCard() {
    if (_isLoading || _stats == null) {
      return _buildLoadingCard();
    }

    return AnimatedBuilder(
      animation: _animationController,
      builder: (context, child) {
        final slideAnimation = Tween<Offset>(
          begin: const Offset(0, 0.5),
          end: Offset.zero,
        ).animate(CurvedAnimation(
          parent: _animationController,
          curve: const Interval(0.0, 0.6, curve: Curves.easeOutBack),
        ));

        return SlideTransition(
          position: slideAnimation,
          child: Card(
            child: Container(
              padding: const EdgeInsets.all(20),
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(12),
                gradient: LinearGradient(
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                  colors: [
                    const Color(0xFF3B82F6).withValues(alpha: 0.1),
                    const Color(0xFF1D4ED8).withValues(alpha: 0.05),
                  ],
                ),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Icon(
                        Icons.analytics,
                        color: const Color(0xFF3B82F6),
                        size: 24,
                      ),
                      const SizedBox(width: 12),
                      Text(
                        'Performance Overview',
                        style: Theme.of(context).textTheme.titleLarge?.copyWith(
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 24),
                  Row(
                    children: [
                      Expanded(child: _buildStatItem(
                        'Total Points',
                        '${_stats!.totalPoints}',
                        Icons.workspace_premium,
                        const Color(0xFFF59E0B),
                      )),
                      Expanded(child: _buildStatItem(
                        'Win Rate',
                        '${_stats!.winRate.toStringAsFixed(1)}%',
                        Icons.trending_up,
                        const Color(0xFF10B981),
                      )),
                    ],
                  ),
                  const SizedBox(height: 16),
                  Row(
                    children: [
                      Expanded(child: _buildStatItem(
                        'Challenges Won',
                        '${_stats!.challengesWon}',
                        Icons.emoji_events,
                        const Color(0xFFFFD700),
                      )),
                      Expanded(child: _buildStatItem(
                        'Current Streak',
                        '${_stats!.currentStreak}',
                        Icons.local_fire_department,
                        const Color(0xFFEF4444),
                      )),
                    ],
                  ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildStatItem(String label, String value, IconData icon, Color color) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: color.withValues(alpha: 0.1),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: color.withValues(alpha: 0.2)),
      ),
      child: Column(
        children: [
          Icon(icon, color: color, size: 24),
          const SizedBox(height: 8),
          Text(
            value,
            style: Theme.of(context).textTheme.titleLarge?.copyWith(
              fontWeight: FontWeight.w700,
              color: color,
            ),
          ),
          const SizedBox(height: 4),
          Text(
            label,
            style: Theme.of(context).textTheme.bodySmall?.copyWith(
              color: Colors.white.withValues(alpha: 0.7),
              fontWeight: FontWeight.w500,
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  Widget _buildPerformanceChart() {
    if (_isLoading || _stats == null) {
      return _buildLoadingCard();
    }

    return AnimatedBuilder(
      animation: _animationController,
      builder: (context, child) {
        final slideAnimation = Tween<Offset>(
          begin: const Offset(1, 0),
          end: Offset.zero,
        ).animate(CurvedAnimation(
          parent: _animationController,
          curve: const Interval(0.2, 0.8, curve: Curves.easeOutBack),
        ));

        return SlideTransition(
          position: slideAnimation,
          child: Card(
            child: Padding(
              padding: const EdgeInsets.all(20),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Monthly Performance Trend',
                    style: Theme.of(context).textTheme.titleMedium?.copyWith(
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                  const SizedBox(height: 20),
                  Container(
                    height: 200,
                    child: CustomPaint(
                      painter: PerformanceChartPainter(_stats!.monthlyData),
                      size: Size.infinite,
                    ),
                  ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildCategoryBreakdown() {
    if (_isLoading || _stats == null) {
      return _buildLoadingCard();
    }

    return AnimatedBuilder(
      animation: _animationController,
      builder: (context, child) {
        final slideAnimation = Tween<Offset>(
          begin: const Offset(-1, 0),
          end: Offset.zero,
        ).animate(CurvedAnimation(
          parent: _animationController,
          curve: const Interval(0.4, 1.0, curve: Curves.easeOutBack),
        ));

        return SlideTransition(
          position: slideAnimation,
          child: Card(
            child: Padding(
              padding: const EdgeInsets.all(20),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Challenge Categories',
                    style: Theme.of(context).textTheme.titleMedium?.copyWith(
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                  const SizedBox(height: 20),
                  ...(_stats!.categoryStats.entries.map((entry) =>
                      _buildCategoryItem(entry.key, entry.value))),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildCategoryItem(String category, CategoryStat stat) {
    final progress = stat.won / stat.total;
    final colors = {
      'Profit': const Color(0xFF10B981),
      'Risk Management': const Color(0xFF3B82F6),
      'Consistency': const Color(0xFF8B5CF6),
      'Community': const Color(0xFFEC4899),
    };

    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: colors[category]?.withValues(alpha: 0.1),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: colors[category]?.withValues(alpha: 0.2) ?? Colors.white.withValues(alpha: 0.1)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                category,
                style: Theme.of(context).textTheme.titleSmall?.copyWith(
                  fontWeight: FontWeight.w600,
                ),
              ),
              Text(
                '${stat.won}/${stat.total}',
                style: Theme.of(context).textTheme.bodySmall?.copyWith(
                  color: colors[category],
                  fontWeight: FontWeight.w600,
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          ClipRRect(
            borderRadius: BorderRadius.circular(4),
            child: LinearProgressIndicator(
              value: progress,
              backgroundColor: Colors.white.withValues(alpha: 0.1),
              valueColor: AlwaysStoppedAnimation<Color>(colors[category]!),
              minHeight: 8,
            ),
          ),
          const SizedBox(height: 8),
          Text(
            'Success Rate: ${(progress * 100).toStringAsFixed(1)}%',
            style: Theme.of(context).textTheme.bodySmall?.copyWith(
              color: Colors.white.withValues(alpha: 0.7),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildRecentActivity() {
    if (_isLoading || _stats == null) {
      return _buildLoadingCard();
    }

    return Card(
      child: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Recent Activity',
              style: Theme.of(context).textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.w600,
              ),
            ),
            const SizedBox(height: 16),
            ...(_stats!.recentActivities.map((activity) =>
                _buildActivityItem(activity))),
          ],
        ),
      ),
    );
  }

  Widget _buildActivityItem(RecentActivity activity) {
    final isWin = activity.type == 'win';
    final color = isWin ? const Color(0xFF10B981) : const Color(0xFFEF4444);
    final icon = isWin ? Icons.emoji_events : Icons.close;

    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: color.withValues(alpha: 0.1),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: color.withValues(alpha: 0.2)),
      ),
      child: Row(
        children: [
          Icon(icon, color: color, size: 20),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  activity.challengeName,
                  style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                    fontWeight: FontWeight.w600,
                  ),
                ),
                Text(
                  activity.description,
                  style: Theme.of(context).textTheme.bodySmall?.copyWith(
                    color: Colors.white.withValues(alpha: 0.7),
                  ),
                ),
              ],
            ),
          ),
          Text(
            '${activity.pointsEarned} pts',
            style: Theme.of(context).textTheme.bodySmall?.copyWith(
              color: color,
              fontWeight: FontWeight.w600,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildLoadingCard() {
    return Card(
      child: Container(
        height: 200,
        padding: const EdgeInsets.all(20),
        child: Center(
          child: CircularProgressIndicator(
            color: const Color(0xFF3B82F6),
          ),
        ),
      ),
    );
  }

  ChallengeStats _generateMockStats() {
    return ChallengeStats(
      totalPoints: 1250,
      winRate: 78.5,
      challengesWon: 15,
      currentStreak: 5,
      monthlyData: [
        MonthlyData('Jan', 150),
        MonthlyData('Feb', 320),
        MonthlyData('Mar', 280),
        MonthlyData('Apr', 450),
        MonthlyData('May', 380),
        MonthlyData('Jun', 520),
      ],
      categoryStats: {
        'Profit': CategoryStat(won: 8, total: 12),
        'Risk Management': CategoryStat(won: 5, total: 6),
        'Consistency': CategoryStat(won: 3, total: 5),
        'Community': CategoryStat(won: 2, total: 3),
      },
      recentActivities: [
        RecentActivity(
          challengeName: 'Weekly Profit Master',
          description: 'Completed challenge successfully',
          type: 'win',
          pointsEarned: 150,
        ),
        RecentActivity(
          challengeName: 'Risk Management Pro',
          description: 'Challenge in progress',
          type: 'progress',
          pointsEarned: 0,
        ),
        RecentActivity(
          challengeName: 'Speed Trading',
          description: 'Challenge failed - exceeded risk limit',
          type: 'loss',
          pointsEarned: 0,
        ),
      ],
    );
  }
}

class PerformanceChartPainter extends CustomPainter {
  final List<MonthlyData> data;

  PerformanceChartPainter(this.data);

  @override
  void paint(Canvas canvas, Size size) {
    if (data.isEmpty) return;

    final paint = Paint()
      ..color = const Color(0xFF3B82F6)
      ..strokeWidth = 3
      ..style = PaintingStyle.stroke;

    final fillPaint = Paint()
      ..shader = LinearGradient(
        begin: Alignment.topCenter,
        end: Alignment.bottomCenter,
        colors: [
          const Color(0xFF3B82F6).withValues(alpha: 0.3),
          const Color(0xFF3B82F6).withValues(alpha: 0.0),
        ],
      ).createShader(Rect.fromLTWH(0, 0, size.width, size.height));

    final path = Path();
    final fillPath = Path();
    
    final maxValue = data.map((d) => d.points).reduce((a, b) => a > b ? a : b);
    final stepX = size.width / (data.length - 1);

    for (int i = 0; i < data.length; i++) {
      final x = i * stepX;
      final y = size.height - (data[i].points / maxValue) * size.height;

      if (i == 0) {
        path.moveTo(x, y);
        fillPath.moveTo(x, size.height);
        fillPath.lineTo(x, y);
      } else {
        path.lineTo(x, y);
        fillPath.lineTo(x, y);
      }
    }

    fillPath.lineTo(size.width, size.height);
    fillPath.close();

    canvas.drawPath(fillPath, fillPaint);
    canvas.drawPath(path, paint);

    // Draw dots
    final dotPaint = Paint()
      ..color = const Color(0xFF3B82F6)
      ..style = PaintingStyle.fill;

    for (int i = 0; i < data.length; i++) {
      final x = i * stepX;
      final y = size.height - (data[i].points / maxValue) * size.height;
      canvas.drawCircle(Offset(x, y), 4, dotPaint);
    }
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => true;
}

class ChallengeStats {
  final int totalPoints;
  final double winRate;
  final int challengesWon;
  final int currentStreak;
  final List<MonthlyData> monthlyData;
  final Map<String, CategoryStat> categoryStats;
  final List<RecentActivity> recentActivities;

  ChallengeStats({
    required this.totalPoints,
    required this.winRate,
    required this.challengesWon,
    required this.currentStreak,
    required this.monthlyData,
    required this.categoryStats,
    required this.recentActivities,
  });
}

class MonthlyData {
  final String month;
  final int points;

  MonthlyData(this.month, this.points);
}

class CategoryStat {
  final int won;
  final int total;

  CategoryStat({required this.won, required this.total});
}

class RecentActivity {
  final String challengeName;
  final String description;
  final String type; // 'win', 'loss', 'progress'
  final int pointsEarned;

  RecentActivity({
    required this.challengeName,
    required this.description,
    required this.type,
    required this.pointsEarned,
  });
}