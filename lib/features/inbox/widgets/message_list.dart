/// Auto-generated by TradeVerseAI Agent
/// Purpose: Message List component displaying messages sorted by recency

import 'package:flutter/material.dart';

class MessageList extends StatefulWidget {
  const MessageList({Key? key}) : super(key: key);

  @override
  State<MessageList> createState() => _MessageListState();
}

class _MessageListState extends State<MessageList> {
  bool _isLoading = true;
  List<MessageThread> _messages = [];

  @override
  void initState() {
    super.initState();
    _loadMessages();
  }

  Future<void> _loadMessages() async {
    await Future.delayed(const Duration(seconds: 1));
    
    if (mounted) {
      setState(() {
        _messages = _generateMockMessages();
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Row(
                  children: [
                    Icon(
                      Icons.message,
                      color: const Color(0xFF8B5CF6),
                      size: 24,
                    ),
                    const SizedBox(width: 12),
                    Text(
                      'Messages',
                      style: Theme.of(context).textTheme.titleLarge?.copyWith(
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                    if (_messages.any((m) => m.unreadCount > 0))
                      Container(
                        margin: const EdgeInsets.only(left: 8),
                        padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                        decoration: BoxDecoration(
                          color: const Color(0xFFEF4444),
                          borderRadius: BorderRadius.circular(10),
                        ),
                        child: Text(
                          '${_messages.fold<int>(0, (sum, m) => sum + m.unreadCount)}',
                          style: const TextStyle(
                            color: Colors.white,
                            fontSize: 10,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                      ),
                  ],
                ),
                IconButton(
                  onPressed: _startNewMessage,
                  icon: const Icon(Icons.add_comment, size: 20),
                  style: IconButton.styleFrom(
                    foregroundColor: const Color(0xFF8B5CF6),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 20),
            if (_isLoading)
              _buildLoadingState()
            else if (_messages.isEmpty)
              _buildEmptyState()
            else
              _buildMessagesList(),
          ],
        ),
      ),
    );
  }

  Widget _buildLoadingState() {
    return Column(
      children: List.generate(4, (index) => _buildLoadingItem()),
    );
  }

  Widget _buildLoadingItem() {
    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white.withValues(alpha: 0.05),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Row(
        children: [
          Container(
            width: 48,
            height: 48,
            decoration: BoxDecoration(
              color: Colors.white.withValues(alpha: 0.1),
              shape: BoxShape.circle,
            ),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Container(
                  width: 120,
                  height: 16,
                  decoration: BoxDecoration(
                    color: Colors.white.withValues(alpha: 0.1),
                    borderRadius: BorderRadius.circular(4),
                  ),
                ),
                const SizedBox(height: 8),
                Container(
                  width: 200,
                  height: 14,
                  decoration: BoxDecoration(
                    color: Colors.white.withValues(alpha: 0.1),
                    borderRadius: BorderRadius.circular(4),
                  ),
                ),
                const SizedBox(height: 4),
                Container(
                  width: 80,
                  height: 12,
                  decoration: BoxDecoration(
                    color: Colors.white.withValues(alpha: 0.1),
                    borderRadius: BorderRadius.circular(4),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildEmptyState() {
    return Container(
      padding: const EdgeInsets.all(40),
      child: Center(
        child: Column(
          children: [
            Icon(
              Icons.message_outlined,
              size: 64,
              color: Colors.white.withValues(alpha: 0.3),
            ),
            const SizedBox(height: 16),
            Text(
              'No messages',
              style: Theme.of(context).textTheme.titleMedium?.copyWith(
                color: Colors.white.withValues(alpha: 0.7),
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Start a conversation with other traders',
              style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                color: Colors.white.withValues(alpha: 0.5),
              ),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildMessagesList() {
    return Column(
      children: _messages.map((message) => _buildMessageItem(message)).toList(),
    );
  }

  Widget _buildMessageItem(MessageThread thread) {
    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      child: Material(
        color: thread.unreadCount > 0 ? Colors.white.withValues(alpha: 0.05) : Colors.transparent,
        borderRadius: BorderRadius.circular(8),
        child: InkWell(
          onTap: () => _openMessageThread(thread),
          borderRadius: BorderRadius.circular(8),
          child: Container(
            padding: const EdgeInsets.all(16),
            child: Row(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Stack(
                  children: [
                    CircleAvatar(
                      radius: 24,
                      backgroundColor: thread.avatarColor,
                      child: Text(
                        thread.otherUserName[0].toUpperCase(),
                        style: const TextStyle(
                          color: Colors.white,
                          fontWeight: FontWeight.w600,
                          fontSize: 18,
                        ),
                      ),
                    ),
                    if (thread.isOnline)
                      Positioned(
                        right: 0,
                        bottom: 0,
                        child: Container(
                          width: 12,
                          height: 12,
                          decoration: BoxDecoration(
                            color: const Color(0xFF10B981),
                            shape: BoxShape.circle,
                            border: Border.all(color: Colors.white, width: 2),
                          ),
                        ),
                      ),
                  ],
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          Expanded(
                            child: Text(
                              thread.otherUserName,
                              style: Theme.of(context).textTheme.titleSmall?.copyWith(
                                fontWeight: FontWeight.w600,
                              ),
                            ),
                          ),
                          Text(
                            _formatTime(thread.lastMessageTime),
                            style: Theme.of(context).textTheme.bodySmall?.copyWith(
                              color: Colors.white.withValues(alpha: 0.5),
                              fontSize: 11,
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 4),
                      Row(
                        children: [
                          if (thread.lastMessage.senderId == 'current_user')
                            Icon(
                              Icons.done_all,
                              size: 16,
                              color: thread.lastMessage.isRead 
                                  ? const Color(0xFF3B82F6)
                                  : Colors.white.withValues(alpha: 0.5),
                            ),
                          if (thread.lastMessage.senderId == 'current_user')
                            const SizedBox(width: 4),
                          Expanded(
                            child: Text(
                              thread.lastMessage.content,
                              style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                                color: thread.unreadCount > 0 
                                    ? Colors.white
                                    : Colors.white.withValues(alpha: 0.7),
                                fontWeight: thread.unreadCount > 0 
                                    ? FontWeight.w500
                                    : FontWeight.normal,
                              ),
                              maxLines: 1,
                              overflow: TextOverflow.ellipsis,
                            ),
                          ),
                          if (thread.unreadCount > 0)
                            Container(
                              margin: const EdgeInsets.only(left: 8),
                              padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                              decoration: BoxDecoration(
                                color: const Color(0xFF3B82F6),
                                borderRadius: BorderRadius.circular(10),
                              ),
                              child: Text(
                                '${thread.unreadCount}',
                                style: const TextStyle(
                                  color: Colors.white,
                                  fontSize: 10,
                                  fontWeight: FontWeight.w600,
                                ),
                              ),
                            ),
                        ],
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  String _formatTime(DateTime timestamp) {
    final now = DateTime.now();
    final difference = now.difference(timestamp);
    
    if (difference.inMinutes < 1) {
      return 'now';
    } else if (difference.inHours < 1) {
      return '${difference.inMinutes}m';
    } else if (difference.inDays < 1) {
      return '${difference.inHours}h';
    } else if (difference.inDays < 7) {
      return '${difference.inDays}d';
    } else {
      return '${timestamp.day}/${timestamp.month}';
    }
  }

  void _openMessageThread(MessageThread thread) {
    // Mark messages as read
    setState(() {
      thread.unreadCount = 0;
    });
    
    // Navigate to message thread
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Open chat with ${thread.otherUserName}')),
    );
  }

  void _startNewMessage() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Start new message')),
    );
  }

  List<MessageThread> _generateMockMessages() {
    final names = ['Alex Miller', 'Sarah Kim', 'Mike Rodriguez', 'Emma Lee', 'John Davis'];
    final colors = [
      const Color(0xFF3B82F6), const Color(0xFF10B981), const Color(0xFFF59E0B),
      const Color(0xFF8B5CF6), const Color(0xFFEF4444),
    ];
    final messages = [
      'Hey, what do you think about the EUR/USD setup?',
      'Thanks for the trading tip! It worked perfectly 📈',
      'Are you participating in this week\'s challenge?',
      'Great analysis on your latest post! 🔥',
      'Let\'s discuss that breakout strategy',
    ];
    
    return List.generate(names.length, (index) {
      return MessageThread(
        id: 'thread_$index',
        otherUserName: names[index],
        avatarColor: colors[index],
        isOnline: index < 2,
        lastMessage: MessageItem(
          id: 'msg_$index',
          content: messages[index],
          senderId: index == 0 ? 'other_user' : 'current_user',
          timestamp: DateTime.now().subtract(Duration(hours: index + 1)),
          isRead: index != 0,
        ),
        lastMessageTime: DateTime.now().subtract(Duration(hours: index + 1)),
        unreadCount: index == 0 ? 2 : 0,
      );
    });
  }
}

class MessageThread {
  final String id;
  final String otherUserName;
  final Color avatarColor;
  final bool isOnline;
  final MessageItem lastMessage;
  final DateTime lastMessageTime;
  int unreadCount;

  MessageThread({
    required this.id,
    required this.otherUserName,
    required this.avatarColor,
    required this.isOnline,
    required this.lastMessage,
    required this.lastMessageTime,
    required this.unreadCount,
  });
}

class MessageItem {
  final String id;
  final String content;
  final String senderId;
  final DateTime timestamp;
  final bool isRead;

  MessageItem({
    required this.id,
    required this.content,
    required this.senderId,
    required this.timestamp,
    required this.isRead,
  });
}