/// Auto-generated by TradeVerseAI Agent
/// Purpose: Notification List component listing follows, mentions, and replies

import 'package:flutter/material.dart';

class NotificationList extends StatefulWidget {
  const NotificationList({Key? key}) : super(key: key);

  @override
  State<NotificationList> createState() => _NotificationListState();
}

class _NotificationListState extends State<NotificationList> {
  bool _isLoading = true;
  List<NotificationItem> _notifications = [];

  @override
  void initState() {
    super.initState();
    _loadNotifications();
  }

  Future<void> _loadNotifications() async {
    await Future.delayed(const Duration(seconds: 1));
    
    if (mounted) {
      setState(() {
        _notifications = _generateMockNotifications();
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Row(
                  children: [
                    Icon(
                      Icons.notifications,
                      color: const Color(0xFF3B82F6),
                      size: 24,
                    ),
                    const SizedBox(width: 12),
                    Text(
                      'Notifications',
                      style: Theme.of(context).textTheme.titleLarge?.copyWith(
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                    if (_notifications.any((n) => !n.isRead))
                      Container(
                        margin: const EdgeInsets.only(left: 8),
                        padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                        decoration: BoxDecoration(
                          color: const Color(0xFFEF4444),
                          borderRadius: BorderRadius.circular(10),
                        ),
                        child: Text(
                          '${_notifications.where((n) => !n.isRead).length}',
                          style: const TextStyle(
                            color: Colors.white,
                            fontSize: 10,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                      ),
                  ],
                ),
                TextButton(
                  onPressed: _markAllAsRead,
                  child: const Text('Mark All Read'),
                  style: TextButton.styleFrom(
                    foregroundColor: const Color(0xFF3B82F6),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 20),
            if (_isLoading)
              _buildLoadingState()
            else if (_notifications.isEmpty)
              _buildEmptyState()
            else
              _buildNotificationsList(),
          ],
        ),
      ),
    );
  }

  Widget _buildLoadingState() {
    return Column(
      children: List.generate(5, (index) => _buildLoadingItem()),
    );
  }

  Widget _buildLoadingItem() {
    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white.withValues(alpha: 0.05),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Row(
        children: [
          Container(
            width: 40,
            height: 40,
            decoration: BoxDecoration(
              color: Colors.white.withValues(alpha: 0.1),
              shape: BoxShape.circle,
            ),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Container(
                  width: 200,
                  height: 14,
                  decoration: BoxDecoration(
                    color: Colors.white.withValues(alpha: 0.1),
                    borderRadius: BorderRadius.circular(4),
                  ),
                ),
                const SizedBox(height: 6),
                Container(
                  width: 100,
                  height: 12,
                  decoration: BoxDecoration(
                    color: Colors.white.withValues(alpha: 0.1),
                    borderRadius: BorderRadius.circular(4),
                  ),
                ),
              ],
            ),
          ),
          Container(
            width: 8,
            height: 8,
            decoration: BoxDecoration(
              color: Colors.white.withValues(alpha: 0.1),
              shape: BoxShape.circle,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildEmptyState() {
    return Container(
      padding: const EdgeInsets.all(40),
      child: Center(
        child: Column(
          children: [
            Icon(
              Icons.notifications_none,
              size: 64,
              color: Colors.white.withValues(alpha: 0.3),
            ),
            const SizedBox(height: 16),
            Text(
              'No notifications',
              style: Theme.of(context).textTheme.titleMedium?.copyWith(
                color: Colors.white.withValues(alpha: 0.7),
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'You\'re all caught up!',
              style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                color: Colors.white.withValues(alpha: 0.5),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildNotificationsList() {
    return Column(
      children: _notifications.map((notification) => _buildNotificationItem(notification)).toList(),
    );
  }

  Widget _buildNotificationItem(NotificationItem notification) {
    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      child: Material(
        color: notification.isRead ? Colors.transparent : Colors.white.withValues(alpha: 0.05),
        borderRadius: BorderRadius.circular(8),
        child: InkWell(
          onTap: () => _handleNotificationTap(notification),
          borderRadius: BorderRadius.circular(8),
          child: Container(
            padding: const EdgeInsets.all(16),
            child: Row(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Container(
                  width: 40,
                  height: 40,
                  decoration: BoxDecoration(
                    color: notification.iconColor.withValues(alpha: 0.2),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(
                    notification.icon,
                    color: notification.iconColor,
                    size: 20,
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      RichText(
                        text: TextSpan(
                          style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                            height: 1.4,
                          ),
                          children: [
                            TextSpan(
                              text: notification.title,
                              style: const TextStyle(fontWeight: FontWeight.w600),
                            ),
                            if (notification.subtitle != null) ...[
                              const TextSpan(text: ' '),
                              TextSpan(text: notification.subtitle),
                            ],
                          ],
                        ),
                      ),
                      if (notification.body != null) ...[
                        const SizedBox(height: 4),
                        Text(
                          notification.body!,
                          style: Theme.of(context).textTheme.bodySmall?.copyWith(
                            color: Colors.white.withValues(alpha: 0.7),
                          ),
                          maxLines: 2,
                          overflow: TextOverflow.ellipsis,
                        ),
                      ],
                      const SizedBox(height: 6),
                      Text(
                        _formatTime(notification.timestamp),
                        style: Theme.of(context).textTheme.bodySmall?.copyWith(
                          color: Colors.white.withValues(alpha: 0.5),
                          fontSize: 11,
                        ),
                      ),
                    ],
                  ),
                ),
                Column(
                  children: [
                    if (!notification.isRead)
                      Container(
                        width: 8,
                        height: 8,
                        decoration: const BoxDecoration(
                          color: Color(0xFF3B82F6),
                          shape: BoxShape.circle,
                        ),
                      ),
                    const SizedBox(height: 4),
                    PopupMenuButton<String>(
                      icon: Icon(
                        Icons.more_vert,
                        size: 16,
                        color: Colors.white.withValues(alpha: 0.5),
                      ),
                      onSelected: (value) => _handleMenuAction(value, notification),
                      itemBuilder: (context) => [
                        PopupMenuItem(
                          value: 'mark_read',
                          child: Text(notification.isRead ? 'Mark as unread' : 'Mark as read'),
                        ),
                        const PopupMenuItem(
                          value: 'delete',
                          child: Text('Delete'),
                        ),
                      ],
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  String _formatTime(DateTime timestamp) {
    final now = DateTime.now();
    final difference = now.difference(timestamp);
    
    if (difference.inMinutes < 1) {
      return 'Just now';
    } else if (difference.inHours < 1) {
      return '${difference.inMinutes}m ago';
    } else if (difference.inDays < 1) {
      return '${difference.inHours}h ago';
    } else if (difference.inDays < 7) {
      return '${difference.inDays}d ago';
    } else {
      return '${timestamp.day}/${timestamp.month}';
    }
  }

  void _handleNotificationTap(NotificationItem notification) {
    // Mark as read
    setState(() {
      notification.isRead = true;
    });
    
    // Navigate based on notification type
    switch (notification.type) {
      case NotificationType.follow:
        _navigateToProfile(notification.relatedId);
        break;
      case NotificationType.mention:
        _navigateToPost(notification.relatedId);
        break;
      case NotificationType.reply:
        _navigateToComment(notification.relatedId);
        break;
      case NotificationType.tradeUpdate:
        _navigateToTrade(notification.relatedId);
        break;
      case NotificationType.challengeUpdate:
        _navigateToChallenge(notification.relatedId);
        break;
    }
  }

  void _handleMenuAction(String action, NotificationItem notification) {
    switch (action) {
      case 'mark_read':
        setState(() {
          notification.isRead = !notification.isRead;
        });
        break;
      case 'delete':
        setState(() {
          _notifications.remove(notification);
        });
        break;
    }
  }

  void _markAllAsRead() {
    setState(() {
      for (var notification in _notifications) {
        notification.isRead = true;
      }
    });
  }

  void _navigateToProfile(String userId) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Navigate to profile: $userId')),
    );
  }

  void _navigateToPost(String postId) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Navigate to post: $postId')),
    );
  }

  void _navigateToComment(String commentId) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Navigate to comment: $commentId')),
    );
  }

  void _navigateToTrade(String tradeId) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Navigate to trade: $tradeId')),
    );
  }

  void _navigateToChallenge(String challengeId) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Navigate to challenge: $challengeId')),
    );
  }

  List<NotificationItem> _generateMockNotifications() {
    return [
      NotificationItem(
        id: '1',
        type: NotificationType.follow,
        title: 'Alex M.',
        subtitle: 'started following you',
        timestamp: DateTime.now().subtract(const Duration(minutes: 5)),
        icon: Icons.person_add,
        iconColor: const Color(0xFF10B981),
        relatedId: 'user_alex',
        isRead: false,
      ),
      NotificationItem(
        id: '2',
        type: NotificationType.mention,
        title: 'Sarah K.',
        subtitle: 'mentioned you in a comment',
        body: 'Great analysis on EUR/USD! What do you think about...',
        timestamp: DateTime.now().subtract(const Duration(hours: 1)),
        icon: Icons.alternate_email,
        iconColor: const Color(0xFF3B82F6),
        relatedId: 'post_123',
        isRead: false,
      ),
      NotificationItem(
        id: '3',
        type: NotificationType.tradeUpdate,
        title: 'Trade Alert',
        subtitle: 'Your EUR/USD position hit take profit',
        body: 'Congratulations! Your long position closed at +1.8% profit',
        timestamp: DateTime.now().subtract(const Duration(hours: 2)),
        icon: Icons.trending_up,
        iconColor: const Color(0xFF10B981),
        relatedId: 'trade_456',
        isRead: true,
      ),
      NotificationItem(
        id: '4',
        type: NotificationType.challengeUpdate,
        title: 'Challenge Update',
        subtitle: 'You\'re now 3rd in "Weekly Profit Master"',
        timestamp: DateTime.now().subtract(const Duration(hours: 4)),
        icon: Icons.emoji_events,
        iconColor: const Color(0xFFF59E0B),
        relatedId: 'challenge_789',
        isRead: true,
      ),
      NotificationItem(
        id: '5',
        type: NotificationType.reply,
        title: 'Mike R.',
        subtitle: 'replied to your comment',
        body: 'I agree with your technical analysis. The trend is definitely...',
        timestamp: DateTime.now().subtract(const Duration(days: 1)),
        icon: Icons.reply,
        iconColor: const Color(0xFF8B5CF6),
        relatedId: 'comment_101',
        isRead: true,
      ),
    ];
  }
}

enum NotificationType {
  follow,
  mention,
  reply,
  tradeUpdate,
  challengeUpdate,
}

class NotificationItem {
  final String id;
  final NotificationType type;
  final String title;
  final String? subtitle;
  final String? body;
  final DateTime timestamp;
  final IconData icon;
  final Color iconColor;
  final String relatedId;
  bool isRead;

  NotificationItem({
    required this.id,
    required this.type,
    required this.title,
    this.subtitle,
    this.body,
    required this.timestamp,
    required this.icon,
    required this.iconColor,
    required this.relatedId,
    this.isRead = false,
  });
}