/// Auto-generated by TradeVerseAI Agent
/// Purpose: Pie chart component showing winning vs losing trades distribution with animations

import 'package:flutter/material.dart';
import 'dart:math' as math;

class WinLossPieChart extends StatefulWidget {
  final int winningTrades;
  final int losingTrades;
  final bool animate;

  const WinLossPieChart({
    Key? key,
    this.winningTrades = 27,
    this.losingTrades = 15,
    this.animate = true,
  }) : super(key: key);

  @override
  State<WinLossPieChart> createState() => _WinLossPieChartState();
}

class _WinLossPieChartState extends State<WinLossPieChart>
    with SingleTickerProviderStateMixin {
  late AnimationController _animationController;
  late Animation<double> _animation;
  int? _hoveredSegment;

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 1500),
      vsync: this,
    );
    
    _animation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeInOutCubic,
    ));
    
    if (widget.animate) {
      _animationController.forward();
    } else {
      _animationController.value = 1.0;
    }
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final totalTrades = widget.winningTrades + widget.losingTrades;
    final winPercentage = totalTrades > 0 
        ? (widget.winningTrades / totalTrades * 100) 
        : 0.0;
    final lossPercentage = totalTrades > 0 
        ? (widget.losingTrades / totalTrades * 100) 
        : 0.0;

    return Card(
      child: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(
                  Icons.pie_chart,
                  color: const Color(0xFF3B82F6),
                  size: 20,
                ),
                const SizedBox(width: 8),
                Text(
                  'Win/Loss Distribution',
                  style: Theme.of(context).textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.w600,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 20),
            Row(
              children: [
                // Pie Chart
                Expanded(
                  flex: 2,
                  child: AspectRatio(
                    aspectRatio: 1,
                    child: AnimatedBuilder(
                      animation: _animation,
                      builder: (context, child) {
                        return GestureDetector(
                          onPanUpdate: (details) => _handleHover(details.localPosition),
                          child: CustomPaint(
                            painter: PieChartPainter(
                              winningTrades: widget.winningTrades,
                              losingTrades: widget.losingTrades,
                              animationValue: _animation.value,
                              hoveredSegment: _hoveredSegment,
                            ),
                          ),
                        );
                      },
                    ),
                  ),
                ),
                const SizedBox(width: 20),
                // Legend and Stats
                Expanded(
                  flex: 3,
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      _buildLegendItem(
                        'Winning Trades',
                        widget.winningTrades,
                        winPercentage,
                        const Color(0xFF10B981),
                        0,
                      ),
                      const SizedBox(height: 12),
                      _buildLegendItem(
                        'Losing Trades',
                        widget.losingTrades,
                        lossPercentage,
                        const Color(0xFFEF4444),
                        1,
                      ),
                      const SizedBox(height: 20),
                      _buildSummaryStats(totalTrades, winPercentage),
                    ],
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildLegendItem(String label, int count, double percentage, Color color, int segmentIndex) {
    final isHovered = _hoveredSegment == segmentIndex;
    
    return AnimatedContainer(
      duration: const Duration(milliseconds: 200),
      padding: EdgeInsets.all(isHovered ? 12 : 8),
      decoration: BoxDecoration(
        color: isHovered ? color.withValues(alpha: 0.1) : Colors.transparent,
        borderRadius: BorderRadius.circular(8),
        border: Border.all(
          color: isHovered ? color.withValues(alpha: 0.3) : Colors.transparent,
        ),
      ),
      child: Row(
        children: [
          Container(
            width: 16,
            height: 16,
            decoration: BoxDecoration(
              color: color,
              shape: BoxShape.circle,
            ),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  label,
                  style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                    fontWeight: FontWeight.w500,
                  ),
                ),
                const SizedBox(height: 2),
                Text(
                  '$count trades (${percentage.toStringAsFixed(1)}%)',
                  style: Theme.of(context).textTheme.bodySmall?.copyWith(
                    color: Colors.white.withValues(alpha: 0.7),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSummaryStats(int totalTrades, double winPercentage) {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.white.withValues(alpha: 0.05),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.white.withValues(alpha: 0.1)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                'Total Trades',
                style: Theme.of(context).textTheme.bodySmall?.copyWith(
                  color: Colors.white.withValues(alpha: 0.7),
                ),
              ),
              Text(
                '$totalTrades',
                style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                  fontWeight: FontWeight.w600,
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                'Win Rate',
                style: Theme.of(context).textTheme.bodySmall?.copyWith(
                  color: Colors.white.withValues(alpha: 0.7),
                ),
              ),
              Text(
                '${winPercentage.toStringAsFixed(1)}%',
                style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                  fontWeight: FontWeight.w600,
                  color: const Color(0xFF10B981),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  void _handleHover(Offset position) {
    final center = const Offset(100, 100); // Approximate center
    final distance = (position - center).distance;
    
    if (distance < 80) { // Within pie chart radius
      final angle = math.atan2(position.dy - center.dy, position.dx - center.dx);
      final normalizedAngle = (angle + math.pi) / (2 * math.pi);
      
      final totalTrades = widget.winningTrades + widget.losingTrades;
      final winningRatio = widget.winningTrades / totalTrades;
      
      setState(() {
        _hoveredSegment = normalizedAngle < winningRatio ? 0 : 1;
      });
    } else {
      setState(() {
        _hoveredSegment = null;
      });
    }
  }
}

class PieChartPainter extends CustomPainter {
  final int winningTrades;
  final int losingTrades;
  final double animationValue;
  final int? hoveredSegment;

  PieChartPainter({
    required this.winningTrades,
    required this.losingTrades,
    required this.animationValue,
    this.hoveredSegment,
  });

  @override
  void paint(Canvas canvas, Size size) {
    final center = Offset(size.width / 2, size.height / 2);
    final radius = math.min(size.width, size.height) / 2 - 20;
    
    final totalTrades = winningTrades + losingTrades;
    if (totalTrades == 0) return;

    final winningAngle = (winningTrades / totalTrades) * 2 * math.pi;
    final losingAngle = (losingTrades / totalTrades) * 2 * math.pi;

    // Draw winning segment
    _drawSegment(
      canvas,
      center,
      radius,
      -math.pi / 2,
      winningAngle * animationValue,
      const Color(0xFF10B981),
      hoveredSegment == 0,
    );

    // Draw losing segment
    _drawSegment(
      canvas,
      center,
      radius,
      -math.pi / 2 + winningAngle,
      losingAngle * animationValue,
      const Color(0xFFEF4444),
      hoveredSegment == 1,
    );

    // Draw center circle for donut effect
    final centerPaint = Paint()
      ..color = const Color(0xFF1E293B)
      ..style = PaintingStyle.fill;
    
    canvas.drawCircle(center, radius * 0.4, centerPaint);

    // Draw center stats
    _drawCenterText(canvas, center, totalTrades);
  }

  void _drawSegment(Canvas canvas, Offset center, double radius, double startAngle, 
      double sweepAngle, Color color, bool isHovered) {
    final paint = Paint()
      ..color = color
      ..style = PaintingStyle.fill;

    final adjustedRadius = isHovered ? radius + 5 : radius;
    
    final rect = Rect.fromCircle(center: center, radius: adjustedRadius);
    canvas.drawArc(rect, startAngle, sweepAngle, true, paint);

    // Draw border
    final borderPaint = Paint()
      ..color = color.withValues(alpha: 0.8)
      ..style = PaintingStyle.stroke
      ..strokeWidth = 2;
    
    canvas.drawArc(rect, startAngle, sweepAngle, true, borderPaint);
  }

  void _drawCenterText(Canvas canvas, Offset center, int totalTrades) {
    final textPainter = TextPainter(
      text: TextSpan(
        children: [
          TextSpan(
            text: '$totalTrades\n',
            style: const TextStyle(
              color: Colors.white,
              fontSize: 24,
              fontWeight: FontWeight.bold,
            ),
          ),
          const TextSpan(
            text: 'Total Trades',
            style: TextStyle(
              color: Colors.white70,
              fontSize: 12,
            ),
          ),
        ],
      ),
      textAlign: TextAlign.center,
      textDirection: TextDirection.ltr,
    );
    
    textPainter.layout();
    textPainter.paint(
      canvas, 
      center - Offset(textPainter.width / 2, textPainter.height / 2),
    );
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => true;
}